<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Springboot+百度云实现人脸识别</title>
      <link href="/2022/05/20/springboot-bai-du-yun-shi-xian-ren-lian-shi-bie/"/>
      <url>/2022/05/20/springboot-bai-du-yun-shi-xian-ren-lian-shi-bie/</url>
      
        <content type="html"><![CDATA[<p><strong>Java项目分享</strong></p><p>缺项目经验的请看过来</p><p>2篇原创内容</p><p>公众号</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>去年在公司参与了一个某某机场建设智能机场的一个项目，人脸登机是其中的一个功能模块，当时只是写了后台的接口，调用人脸识别设备的api，给闸机回传数据信号，以保障该功能的正常使用。</p><p>当时因为项目进度紧张，手里还有其他项目赶进度，也就没时间去分享这个功能的实现。前几天刷脸进公司大楼的时候，突然想起来应该写一个功能类似的demo分享个人的一些小小的经验。在当时项目中刷脸的设备终端是采购某某AI公司，当然咱们在demo里面也不可能买一台那东西来瞎搞，于是乎就拿系统刷脸登录来练练手，人脸识别解决方案就用百度云的吧，当然腾讯、阿里这方面也很牛逼的。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><h4 id="一、人脸注册"><a href="#一、人脸注册" class="headerlink" title="一、人脸注册"></a>一、人脸注册</h4><p>step1：人像采集。在注册页面上用html中video组件和js调用笔记本摄像头，并抓取人像图片。没有摄像头的笔记本、台式机的童鞋告辞吧，走好不送。。。</p><p>step2：人像上传至项目文件夹。将在页面采集到的人像数据转换成bash64字符传输到web后台，在后台将bash64转换成图片上传至项目文件夹。</p><p>step3：将用户的注册信息写入数据库，用户的照片使用路径存储。</p><p>step4：将采集到的人像信息（bash64）上传至百度云的人脸识别云端服务器。ps这块实现也可离线私有化处理方案，有兴趣的童鞋可自行研究。</p><h4 id="二、人脸登录"><a href="#二、人脸登录" class="headerlink" title="二、人脸登录"></a>二、人脸登录</h4><p>step1：人像采集。在登录页面上用html中video组件和js调用笔记本摄像头，并抓取人像图片。</p><p>step2：人像数据传输。抓取的人脸图片信息回传至web后台。</p><p>step3：人像比对。在web后台实例化并调用百度云人脸识别的sdk，将登录页面采集到的图像数据和注册的图像信息相比对（这块是百度云人脸识别解决方案实现的，也是最牛B的地方），返回的比分大于95分即可实现登录。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>好了，前言和需求分析也哔哔了这么久了，接下来是实现和上代码了。</p><h4 id="一、人脸注册-1"><a href="#一、人脸注册-1" class="headerlink" title="一、人脸注册"></a>一、人脸注册</h4><p>前端页面代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE&nbsp;html&gt;&lt;html&gt;&lt;head&gt;&lt;meta&nbsp;charset="UTF-8"&gt;&lt;title&gt;Insert&nbsp;title&nbsp;here&lt;/title&gt;&nbsp;&lt;style&nbsp;type="text/css"&gt;&nbsp;&nbsp;&nbsp;/**解决浏览器兼容性问题**/&nbsp;&nbsp;*{margin:&nbsp;0;padding:&nbsp;0;}&nbsp;&nbsp;html,body{width:&nbsp;100%;height:&nbsp;100%;}/**/&nbsp;&nbsp;body{background:&nbsp;url(img/bg03.jpg)&nbsp;no-repeat&nbsp;center;}&nbsp;&nbsp;h1{color:&nbsp;#fff;text-align:&nbsp;center;line-height:&nbsp;80px;}&nbsp;&nbsp;.media{width:&nbsp;534px;height:&nbsp;400px;margin:&nbsp;40px&nbsp;auto&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;#register{width:&nbsp;200px;height:50px;background-color:&nbsp;#2196f3;&nbsp;margin:&nbsp;60px&nbsp;auto&nbsp;0;&nbsp;&nbsp;text-align:&nbsp;center;line-height:&nbsp;50px;color:&nbsp;#fff;border-radius:&nbsp;10px;}&nbsp;&nbsp;#canvas{display:&nbsp;none;}&nbsp;&nbsp;#shuru{width:&nbsp;200px;height:50px;background-color:&nbsp;#2196f3;&nbsp;margin:&nbsp;20px&nbsp;auto&nbsp;0;}&nbsp;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&nbsp;&lt;h1&gt;百度云人脸注册&lt;/h1&gt;&nbsp;&lt;div&nbsp;id="shuru"&gt;&nbsp;用户名：&nbsp;&lt;input&nbsp;type="text"&nbsp;name="username"&nbsp;id="username"/&gt;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&lt;div&nbsp;class="media"&gt;&nbsp;&nbsp;&lt;video&nbsp;id="video"&nbsp;width="450"&nbsp;height="300"&nbsp;src=""&nbsp;autoplay&gt;&lt;/video&gt;&nbsp;&nbsp;&lt;canvas&nbsp;id="canvas"&nbsp;width="450"&nbsp;height="300"&gt;&lt;/canvas&gt;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&lt;button&nbsp;id="register"&nbsp;&gt;确定注册&lt;/button&gt;&nbsp;&lt;script&nbsp;type="text/javascript"&nbsp;src="js/jquery-3.3.1.js"&gt;&lt;/script&gt;&nbsp;&lt;script&nbsp;type="text/javascript"&gt;&nbsp;/**调用摄像头，获取媒体视频流**/&nbsp;var&nbsp;video&nbsp;=&nbsp;document.getElementById('video');&nbsp;//返回画布二维画图环境&nbsp;var&nbsp;userContext&nbsp;=&nbsp;canvas.getContext("2d");&nbsp;var&nbsp;getUserMedia&nbsp;=&nbsp;&nbsp;&nbsp;//浏览器兼容,表示在火狐、Google、IE等浏览器都可正常支持&nbsp;&nbsp;(navigator.getUserMedia&nbsp;||&nbsp;navigator.webkitGetUserMedia&nbsp;||&nbsp;navigator.mozGetUserMedia&nbsp;||&nbsp;navigator.msGetUserMedia)&nbsp;&nbsp;//getUserMedia.call(要调用的对象，约束条件，调用成功的函数，调用失败的函数)&nbsp;&nbsp;getUserMedia.call(navigator,{video:&nbsp;true,audio:&nbsp;false},function(localMediaStream){&nbsp;&nbsp;&nbsp;//获取摄像头捕捉的视频流&nbsp;&nbsp;&nbsp;video.srcObject=localMediaStream;&nbsp;&nbsp;},function(e){&nbsp;&nbsp;&nbsp;console.log("获取摄像头失败！！")&nbsp;&nbsp;});&nbsp;//点击按钮注册事件&nbsp;&nbsp;var&nbsp;btn&nbsp;=&nbsp;document.getElementById("register");&nbsp;&nbsp;btn.onclick&nbsp;=&nbsp;function&nbsp;()&nbsp;{&nbsp;&nbsp;var&nbsp;username&nbsp;=&nbsp;$("#username").val();&nbsp;&nbsp;alert($("#username").val());&nbsp;&nbsp;&nbsp;if(username&nbsp;!=&nbsp;null){&nbsp;&nbsp;&nbsp;&nbsp;//点击按钮时拿到登陆者面部信息&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userContext.drawImage(video,0,0,450,300);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;userImgSrc&nbsp;=&nbsp;document.getElementById("canvas").toDataURL("img/png");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//拿到bash64格式的照片信息&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;faceBase&nbsp;=&nbsp;userImgSrc.split(",")[1];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//ajax异步请求&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.ajax({&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url:&nbsp;"register",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;"post",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:&nbsp;{"faceBase":&nbsp;faceBase,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"userName":&nbsp;username&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success:&nbsp;function(result){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(result&nbsp;===&nbsp;'1'){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert("注册成功！！，点击确认跳转至登录页面");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.location.href="toLogin";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if(result&nbsp;===&nbsp;'2'){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert("您已经注册过啦！！");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert("系统错误！！");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})&nbsp;&nbsp;&nbsp;}else{&nbsp;&nbsp;&nbsp;&nbsp;alert("用户名不能为空");&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面截图，本人太帅，先行打码，嘿嘿</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57eedfefd2d041ae9f964bcd8c2f691a~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>后台具体代码如下:</p><pre class="line-numbers language-none"><code class="language-none">&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;final&nbsp;String&nbsp;APP_ID&nbsp;=&nbsp;"****";&nbsp;&nbsp;private&nbsp;static&nbsp;final&nbsp;String&nbsp;API_KEY&nbsp;=&nbsp;"*******";&nbsp;&nbsp;private&nbsp;static&nbsp;final&nbsp;String&nbsp;SECRET_KEY&nbsp;=&nbsp;"*******";&nbsp;&nbsp;@Autowired&nbsp;private&nbsp;IUserService&nbsp;userService;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;=&nbsp;"register",method&nbsp;=&nbsp;RequestMethod.POST)&nbsp;public&nbsp;String&nbsp;register(String&nbsp;userName,String&nbsp;faceBase)&nbsp;throws&nbsp;IOException&nbsp;{&nbsp;&nbsp;if(!StringUtils.isEmpty(userName)&nbsp;&amp;&amp;&nbsp;!StringUtils.isEmpty(faceBase))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//文件上传的地址&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;upPath&nbsp;=&nbsp;ResourceUtils.getURL("classpath:").getPath()+"static\\photo";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//用于查看路径是否正确&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(upPath);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;图片名称&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;fileName&nbsp;=&nbsp;userName+System.currentTimeMillis()&nbsp;+&nbsp;".png";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(upPath+"\\"+fileName);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;file&nbsp;=&nbsp;new&nbsp;File(upPath+"\\"+fileName);&nbsp;&nbsp;&nbsp;//初始化百度云的AipFace&nbsp;&nbsp;&nbsp;AipFace&nbsp;client&nbsp;=&nbsp;new&nbsp;AipFace(APP_ID,&nbsp;API_KEY,&nbsp;SECRET_KEY);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//往自己demo数据库里插入一条用户数据&nbsp;&nbsp;&nbsp;Users&nbsp;user&nbsp;=&nbsp;new&nbsp;Users();&nbsp;&nbsp;&nbsp;user.setUserName(userName);&nbsp;&nbsp;&nbsp;user.setUserPhoto(upPath+"\\"+fileName);&nbsp;&nbsp;&nbsp;Users&nbsp;exitUser&nbsp;=&nbsp;userService.selectUserByName(user);&nbsp;&nbsp;&nbsp;if(exitUser&nbsp;!=&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;"2";&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;userService.addUsers(user);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;往自己demo服务器里面上传摄像头捕获的图片&nbsp;&nbsp;&nbsp;GenerateImage(faceBase,&nbsp;file);&nbsp;&nbsp;&nbsp;//向百度云人脸库插入一张人脸&nbsp;&nbsp;&nbsp;facesetAddUser(client,faceBase,userName);&nbsp;&nbsp;}&nbsp;&nbsp;return&nbsp;"1";&nbsp;&nbsp;&nbsp;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>APP_ID</code>&nbsp;、<code>API_KEY</code>、<code>SECRET_KEY</code>三个参数分别为百度云人脸识别上面的三个数据项，如下图</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3fc72557baf49f1af52791915c02006~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/854806e433424bebae947f5a3d54aaac~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>点击完注册按钮后，就会发现。。。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f898af6589f845cea669ce714836d34a~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>1</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b765ac5c8bb247c697ebf85047d44902~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>2</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06baa278abd2489cb0a93f1602edf5d9~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>3</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1dd2d9272384114a996e868716ae946~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>4</p><p>到这就算一个用户注册成功了，个人这张大帅脸也算是录进去了，下面就是刷脸登录了。面试题推荐：面试前可以在这里刷刷题，很巴适！（Java版）</p><h4 id="二、刷脸登录"><a href="#二、刷脸登录" class="headerlink" title="二、刷脸登录"></a>二、刷脸登录</h4><p>当我注册完后就会进入登录页面</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63d74578cc8d4d94a82c0fe8d8b033d4~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>这时我点击登录按钮，js触发后台方法，具体入下：</p><pre class="line-numbers language-none"><code class="language-none">@RequestMapping(value&nbsp;=&nbsp;"login",method&nbsp;=&nbsp;RequestMethod.POST)&nbsp;public&nbsp;String&nbsp;login(String&nbsp;faceBase)&nbsp;{&nbsp;&nbsp;String&nbsp;faceData&nbsp;=&nbsp;faceBase;&nbsp;&nbsp;//进行人像数据对比&nbsp;&nbsp;AipFace&nbsp;client&nbsp;=&nbsp;new&nbsp;AipFace(APP_ID,API_KEY,SECRET_KEY);&nbsp;&nbsp;Double&nbsp;num&nbsp;=&nbsp;verifyUser(faceData,client);&nbsp;&nbsp;if(num&gt;95)&nbsp;{&nbsp;&nbsp;&nbsp;return&nbsp;"1";&nbsp;&nbsp;}else&nbsp;{&nbsp;&nbsp;&nbsp;return&nbsp;"2";&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;*&nbsp;人脸比对&nbsp;&nbsp;*&nbsp;@param&nbsp;imgBash64&nbsp;照片转bash64格式&nbsp;&nbsp;*&nbsp;@param&nbsp;imgType&nbsp;类型&nbsp;&nbsp;*&nbsp;@param&nbsp;groupList&nbsp;百度云人脸识别用户组&nbsp;&nbsp;*&nbsp;@return&nbsp;&nbsp;*/&nbsp;public&nbsp;Double&nbsp;verifyUser(String&nbsp;imgBash64,AipFace&nbsp;client)&nbsp;{&nbsp;&nbsp;//&nbsp;传入可选参数调用接口&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HashMap&lt;String,&nbsp;String&gt;&nbsp;options&nbsp;=&nbsp;new&nbsp;HashMap&lt;String,&nbsp;String&gt;();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSONObject&nbsp;res&nbsp;=&nbsp;client.search(imgBash64,&nbsp;"BASE64",&nbsp;"user_01",&nbsp;options);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(res.toString(2));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(res.getJSONObject("result"));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(res.getJSONObject("result").getJSONArray("user_list"));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSONObject&nbsp;user&nbsp;=&nbsp;(JSONObject)&nbsp;res.getJSONObject("result").getJSONArray("user_list").get(0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Double&nbsp;score&nbsp;=&nbsp;(Double)&nbsp;user.get("score");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;score;&nbsp;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着我正面面对摄像头，点击登录按钮，就进入了一个大大的success页面</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c653ab78f7a04147b4de2af8695da1ea~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>我侧脸或者拿照片试一下，不好意思，您老只能是404了</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0d909b972694c26a4a9c19ec4ffa036~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>以上就是整个实现的思路和一些步骤了，demo涉及的类和页面比较多，不方便一一截图，随后我把资源上传到本站。如有需要可自行下载。</p><p>综合而言实现还是比较简单的，牛逼的地方都在人家百度云那边呢，咱们只是根据需求合理利用人家的解决方案罢了。其实如果不是很牛逼的专项技术研发公司，做项目能合理利用别人的产品是最有效率的，项目建设最重要的还是投入产出比嘛。与其自己团队苦苦研究，花点成本买人家的成品直接用它不香吗？</p><p>_来源：blog.csdn.net/lw1124052197/article/_<em>details/106077837</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 百度云 </tag>
            
            <tag> 人脸识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>60 个神级 VS Code 插件，助你打造最强编辑器</title>
      <link href="/2022/05/19/60-ge-shen-ji-vs-code-cha-jian-zhu-ni-da-zao-zui-qiang-bian-ji-qi/"/>
      <url>/2022/05/19/60-ge-shen-ji-vs-code-cha-jian-zhu-ni-da-zao-zui-qiang-bian-ji-qi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e4e1b379daf4e0988f6efa67d109dec~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>来源：juejin.cn/post/6994327298740600839  </p><p>本文不做任何编辑器的比较，只是我本人日常使用 <code>vscode</code> 进行开发，并且比较喜欢折腾 <code>vscode</code> ，会到处找这一些好玩的插件，于是越攒越多，今天给大家推荐一下我收藏的 <strong>60</strong> 多个 <code>vscode</code> 插件，据说插件装太多，编辑器会变卡，可能是我的电脑配置还顶得住，目前并没有感觉到卡卡的。</p><p>接下来我会将会以 <strong>优化外观</strong>，<strong>功能扩展</strong>，<strong>提升编码效率</strong>，<strong>代码格式化</strong>，<strong>其它插件</strong> 几个分类来进行介绍。</p><p>一是把它们 <strong>分享</strong> 给有需要的小伙伴们，二是通过此文向小伙伴们 <strong>征集</strong> 其它好玩的插件，可以是任何类型的。有想要推荐其它插件的请评论区补充一下，我看到后会添加到文章中并标注出你的 <strong>ID</strong> 。</p><p>注：本文只涉及插件的基本使用，也就是让你知道存在这样一种插件，以及大致了解这个插件可以做什么事，部分插件的详细配置过于复杂，有需要的小伙伴请自行冲浪。根据每个人电脑，<code>vscode</code> 配置，以及插件的不同，部分插件可能在你电脑上不会生效。文中提到的快捷键都是 <code>windows</code> 下的，其他操作系统的快捷键请自行了解。</p><h1 id="优化外观"><a href="#优化外观" class="headerlink" title="优化外观"></a>优化外观</h1><p>好马用好鞍，好看的编辑器外观，可以提升程序员的编码体验，可以让开发人员的心情变好，让写 <code>bug</code> 更有动力。</p><h2 id="Better-Comments"><a href="#Better-Comments" class="headerlink" title="Better Comments"></a>Better Comments</h2><p>一款美化注释的插件，可以根据不同种类的注释，显示不同的颜色，一目了然。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a250c42f6e64ae8acc667016a5c9f9f~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>安装完以后，插件会默认自带几种颜色的注释，还可以通过 <code>vscode</code> 的配置文件自定义任何颜色，类型的注释。具体的配置方法我给你们找好了。</p><p>👉👉 vscode 插件-better comments-代码注释高亮</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45ba39d62e3b45dd9ab72e01f61fa6ff~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Bracket-Pair-Colorizer-x2F-Bracket-Pair-Colorizer-2"><a href="#Bracket-Pair-Colorizer-x2F-Bracket-Pair-Colorizer-2" class="headerlink" title="Bracket Pair Colorizer / Bracket Pair Colorizer 2"></a>Bracket Pair Colorizer / Bracket Pair Colorizer 2</h2><p>这是一个找对象的插件，不是帮你们找对象啊，是帮你找到括号的另一半。目前有两个版本，<code>Bracket Pair Colorizer 2</code> 是增强版，具体我没有深入研究具体增强了哪些内容。而且它有挺多的设置项，反正安装完默认的配置已经够用了，感兴趣的同学自行发觉更多有趣玩法吧。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d47a09ec9d84134979b4a04579eb8c4~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>大家可以看到配对的括号是相同的颜色，并且当我选中一个括号以后，会出现一条线帮你找到它对应的另一半括号。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f83691f4d86c489a8fbec08407690faf~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>33.gif</p><h2 id="Highlight-Matching-Tag"><a href="#Highlight-Matching-Tag" class="headerlink" title="Highlight Matching Tag"></a>Highlight Matching Tag</h2><p>这也是一个找对象的插件，找的是标签的对象，看我上一个插件的演示图片中，当我点击一下 <code>html</code> 标签，配对的标签就会出现下划线来指示你谁和谁是一对。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d02bc51a44f74448a008ec44687474ef~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Chinese"><a href="#Chinese" class="headerlink" title="Chinese"></a>Chinese</h2><p>让你的 <code>vscode</code> 变成中文，像我这种英语弱鸡才会用，大佬们略过。为什么要放在优化外观的分类里，因为我觉得中文比英文好看🧐🧐，安装完重启就行了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/249bcbaeb875473690b36fe9aef856a5~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Color-Highlight"><a href="#Color-Highlight" class="headerlink" title="Color Highlight"></a>Color Highlight</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33dd841f875c417aa016160a4b3e7e2f~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>看名字就知道了，用于给我们代码中的颜色进行高亮展示的插件。可以看到下图中我设置的 <code>css</code> 颜色属性，直观的展示了出来。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4af1b0c1fd424540af72b71be70c9a1f~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Community-Material-Theme-x2F-Material-Theme"><a href="#Community-Material-Theme-x2F-Material-Theme" class="headerlink" title="Community Material Theme / Material Theme"></a>Community Material Theme / Material Theme</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00f35143053f47688ef93007b2526a49~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>修改编辑器的主题，内置很多种，我用的是 <code>Material Theme Palenight High Contrast</code> 这一款。安装完了以后点击 <strong>设置颜色主题</strong> 就可以了。</p><h2 id="Material-Theme-Icons"><a href="#Material-Theme-Icons" class="headerlink" title="Material Theme Icons"></a>Material Theme Icons</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/268bc452b2a7492ea639b79dc1f523af~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>设置文件图标的，这个插件的长这个样子，还有很多其它修改文件图标的插件，不喜欢这一款的，大家可以自行找一找。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71d410f42d39477ba251db27ca30f3fb~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Error-Gutters"><a href="#Error-Gutters" class="headerlink" title="Error Gutters"></a>Error Gutters</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b7bf48bd65a423a988fe33b2d97f9c5~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>报错的地方都有大红波浪线提示，可以说是非常的直观了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3d6952b393148a08abf73a3069301b9~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Image-preview"><a href="#Image-preview" class="headerlink" title="Image preview"></a>Image preview</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d4bc7e0c3154aff9ef3644118df290a~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>预览代码中图片的引用，鼠标移上去就会有小窗展示图片。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5093e7ed5a9145e1a9c37af78dda651c~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>20210603225907507.gif</p><h2 id="indent-rainbow"><a href="#indent-rainbow" class="headerlink" title="indent-rainbow"></a>indent-rainbow</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f3903e4a01304b3c98d816cad0be0e82~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>看名字就知道了，彩虹缩进，就是把代码不同的缩进展示不同的颜色。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9dcbf17cac594cd3911fc4c6498de4d4~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Indenticator"><a href="#Indenticator" class="headerlink" title="Indenticator"></a>Indenticator</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/951956ff2c1f418ca795ea600519ffcc~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>当你点击一个缩进部分的时候，会出现一条白线来告诉你当前处于的缩进层级，可以更方便的查看代码结构。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48493b25bb81436c87d2adf2ecbe4c7e~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>20180508105328382.gif</p><h2 id="Trailing-Spaces"><a href="#Trailing-Spaces" class="headerlink" title="Trailing Spaces"></a>Trailing Spaces</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f129f0e92d674aac93c1d917218e1409~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>把尾随空格显示出来。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df4e7e5fb01c45b9b75428056bc27c51~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="VSCode-Great-Icons"><a href="#VSCode-Great-Icons" class="headerlink" title="VSCode Great Icons"></a>VSCode Great Icons</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90bd54a4ee564a809f855173394fb277~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>另一个修改文件图标的插件，我用的就是这个，相对于 <code>Material Theme Icons</code> 我更喜欢这个的风格，萝卜青菜可有所爱，大家各取所需。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8c7da0720884aa3ba0cc7a85bef661a~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h1 id="功能扩展"><a href="#功能扩展" class="headerlink" title="功能扩展"></a>功能扩展</h1><p>编辑器自身的功能还是有限的，为了应付日常开发，不得不安装很多其他的软件进行辅助，不过也可以通过插件的方式引入一些常用的辅助软件，它们的功能可能没有原生的强大，但是基本上已经够用，并且是真的很方便。</p><h2 id="AZ-AL-Dev-Tools-x2F-AL-Code-Outline"><a href="#AZ-AL-Dev-Tools-x2F-AL-Code-Outline" class="headerlink" title="AZ AL Dev Tools/AL Code Outline"></a>AZ AL Dev Tools/AL Code Outline</h2><p>用来梳理代码结构的插件，安装完后在文件图标里就会多出一个 <code>AL OUTLINE</code> 的选项。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c487b5ddb6a74afaa03e28247837a204~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>为了演示我找了一个比较长，比较典型的 <code>vue</code> 文件，请忽略我的代码内容，专注于插件的功能🤣🤣， 可以看到展开第一层是极具 <code>vue</code> 单文件组件特点的 <code>template</code>，<code>script</code>，<code>style</code>。逐层展开就可以看到 <code>dom</code> 节点， <code>methods</code> 里面定义的函数等，然后点击就可以快速定位到目标所在位置，妈妈再也不用担心我全局搜啦！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f00c7701126481b87a25d390b38bd14~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>12.gif</p><p>注：它这个里面好像是默认展开的，应该是可以设置是否默认展开，但我没研究过，感兴趣的大佬可以深入调查一下。</p><h2 id="Code-Runner"><a href="#Code-Runner" class="headerlink" title="Code Runner"></a>Code Runner</h2><p>运行代码，可以在编辑器中查看结果，前端同学可以在控制台看 <code>console.log</code> ，还有很多其他玩法，具体使用参考此篇文章</p><p>👉👉 VSCode插件推荐 | Code Runner: 代码一键运行，支持超过40种语言</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d13aefefe844fa891f899b79e90e74a~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="CodeIf"><a href="#CodeIf" class="headerlink" title="CodeIf"></a>CodeIf</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f84fb12f5ea4901b1b6e8e781dcc178~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>在网上看到一句话，<strong>在计算机科学中只有两件难事:缓存失效和命名</strong>。哈哈哈，确实如此，当开发项目时，命名一直都是一种让人痛苦的事情。</p><p>但是命名又是开发过程中一项非常重要的事情，一个好的函数命名，能够让你瞬间明白它实现的功能，所以，每当开发过程中遇到要命名的变量、函数、类时就要冥思苦想，各种翻译。</p><p>但是，<code>CodeIf</code> 的出现让这个问题迎刃而解，它通过搜索 <code>GitHub</code>, <code>Bitbucket</code>, <code>GitLab</code> 来找到真实的使用变量名，为你提供一些高频使用的词汇。</p><p>使用时只需要选中变量名，然后 <strong>右键</strong> 选择 <code>CodeIf</code> 就可以跳转到网页，显示候选命名。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9660711eb77b4c4ca86b5cf97b8090d6~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Color-Info"><a href="#Color-Info" class="headerlink" title="Color Info"></a>Color Info</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68d509b061c54d29beb03ab831711ac9~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>查看颜色详细信息的插件，可以小窗口显示颜色值，rgb,hsl,cmyk,hex等等，可以在配置项里添加要展示的信息类型。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf30c33eeeb247c087da97f916622481~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Code-Spell-Checker"><a href="#Code-Spell-Checker" class="headerlink" title="Code Spell Checker"></a>Code Spell Checker</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31d2fb06f0e645b69ed2e2078c2aaf65~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>检查代码中单词拼写是否正确，当单词不正常的时候，就会在下方出现波浪线进行提示，还可以自定义词典，忽略某个单词的检查等，更多用法参考下面链接。</p><p>👉👉 VSCode中插件Code Spell Checker</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3da0924a8d0b4874b35cfcd44e6d24aa~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Debugger-for-Chrome"><a href="#Debugger-for-Chrome" class="headerlink" title="Debugger for Chrome"></a>Debugger for Chrome</h2><p>这款插件是专门为前端调试开发的，很方便调试，跟谷歌的控制台是一样的功能，安装以后，无需打开浏览器的控制台就能进行断点调试。对应的还有 <code>Debugger for Firefox</code>，<code>Debugger for Microsoft Edge</code>等，其他的我没用过，大家按需安装即可，使用方法应该都大同小异。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/771f2b80351f417c8037b598e5190418~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>安装完以后，左边会出现一个调试的小图标，打开以后再点击上方小齿轮进行配置。根目录下会自动新建 <code>.vscode</code> 文件夹以及 <code>launch.json</code> 文件，不用管。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca11a7da302f40799235de45720ab569~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>配置文件的具体内容和使用方法可以看这一篇，很详细。</p><p>👉👉 VSCode配置 Debugger for Chrome插件</p><h2 id="Git-History"><a href="#Git-History" class="headerlink" title="Git History"></a>Git History</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ecfb09a6c084ddcb4cd30ad02a9a4fb~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>右键单击文件选择 <code>Git：View File History</code> 来以列表的形式查看所有的提交记录。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6160509dd48d4f51bd92fdd3e3b5a4e7~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>2.gif</p><h2 id="GitLens-—-Git-supercharged"><a href="#GitLens-—-Git-supercharged" class="headerlink" title="GitLens — Git supercharged"></a>GitLens — Git supercharged</h2><p>这个也是跟 <code>git</code> 相关的插件，功能比上一个要强大一些。上一个插件的演示图片中可以看到我的每一行代码都有上一次 <code>git</code> 提交的记录，那就是这个插件的功劳。</p><p>还有其他很多的操作，详情查阅下方链接。</p><p>👉👉 VsCode中好用的git源代码管理插件GitLens</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84f59f48144342ebb63bea0343977352~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><p>可以在 <code>vscode</code> 中刷算法题的。我自己没用过😣😣</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac6a41e273ff4dc6b0a0d7bcbc6911f6~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Local-History"><a href="#Local-History" class="headerlink" title="Local History"></a>Local History</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89bc33b78eab4b21a5c855a3c3ac3c2f~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>这个就很强了，本地代码的修改记录。通常我们写错代码了可以撤销，但是撤销完以后再修改，想要取消撤销就难了。有了这个插件直接看代码的修改记录。还可以跟当前版本进行对比，神器。</p><p>安装完以后，项目根目录下会自动生成 <code>.history</code> 的文件夹。代码的修改记录就会放在这里面。记得添加<code>.gitignore</code>，不然每次提交代码的时候就要遭重了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/efdc717babd146e780e71651417cce25~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="open-in-browser"><a href="#open-in-browser" class="headerlink" title="open in browser"></a>open in browser</h2><p>在浏览器中打开 <code>html</code> 文件。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cd9878e73764878a24294ff876889d0~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>安装完以后在目标的 <code>html</code> 文件上右击，选择 <code>open in default browser</code> 即可打开使用浏览器打开文件。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8ffc4a82ca54da6b0441626e04706c9~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Partial-Diff"><a href="#Partial-Diff" class="headerlink" title="Partial Diff"></a>Partial Diff</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8e839ca06a84701a7855a48fb1e0429~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>文件比较界的大拿肯定是 <code>Beyond Compare</code> 了，但是它是收费的！那么 <code>Partial Diff</code> 这款神奇的插件就成为了良好的替代品，选中一代码，右键 <code>Select Text for Compare</code> ，选中另外一部分代码，右键<code>Compare Text with Previous Selection</code>即可。我的是中文的，就更明显了🤣🤣</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd593f22d92d4246a2a6c24fb767236b~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>45.gif</p><h2 id="Postcode"><a href="#Postcode" class="headerlink" title="Postcode"></a>Postcode</h2><p><code>Postman</code> 都听说过吧，这个插件就基本上可以理解为，在 <code>vscode</code> 里面使用 <code>postman</code> 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46ca7e2ed300412e834316b9c0d2df43~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>安装完以后左侧菜单会出现一个 <strong>小盒子</strong> 的图标，点开以后点击 <code>Create Request</code> 就可以正常使用了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0953728c704f49dcab9c3de58dfa10d6~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e001fd7bd8104e25b8d2bb0678821681~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>如果您正在学习Spring Boot，那么推荐一个连载多年还在继续更新的免费教程：<a href="http://blog.didispace.com/spring-boot-learning-2x/">http://blog.didispace.com/spring-boot-learning-2x/</a></p><h2 id="Project-Manager"><a href="#Project-Manager" class="headerlink" title="Project Manager"></a>Project Manager</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/473077f744cc4fdbba317648a41866ec~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>项目管理器，适用于经常切换项目的大佬，虽然我平时接触的项目也不多，不过自己搞着玩的工程也不少。有了这个插件，就不用新窗口打开项目了。</p><p>安装完以后左侧列表会出现一个 <strong>文件夹</strong> 的小图标，点开以后就可以进行项目管理了，通常都是操作<code>projects.json</code> 这个文件，点击项目名字就可以切换了，也可以新窗口打开。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0a59a8f21284401aece61503029ab74~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Quokka-js"><a href="#Quokka-js" class="headerlink" title="Quokka.js"></a>Quokka.js</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1eff364a04694b338eb3e9483e8848bd~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>实时显示代码的运行结果，使用方法请跳转链接</p><p>👉👉 VS Code插件之Quokka.js</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b3dd14b14ae472b822f91ec4ca8bcbb~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>vsc-intro.gif</p><h1 id="提升编码效率"><a href="#提升编码效率" class="headerlink" title="提升编码效率"></a>提升编码效率</h1><p>如何达到极致的编码效率，当然是能不手写则不手写。下面这些插件就是辅助大家进行一些自动化，这样就可以节省下很多的时间用来摸鱼了。</p><h2 id="Auto-Import"><a href="#Auto-Import" class="headerlink" title="Auto Import"></a>Auto Import</h2><p><code>Typescript</code> 自动导入，其实现在很多的插件基本都内置了这种功能，已经不是必须品了。可能是因为我装了各种奇奇怪怪的插件，我现在想导入什么东西的时候，一大堆的提示，随便选一个都能导进来😂</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bd0ba822c414a5ba15c13413215e0a6~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Auto-Rename-Tag"><a href="#Auto-Rename-Tag" class="headerlink" title="Auto Rename Tag"></a>Auto Rename Tag</h2><p>自动修改标签名，重命名一个开始标签时，自动重命名配对的结束标签。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4105eb6c06a24fbb91d08b45834fd915~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>一下子就对应的全修改掉了，是不是很 <code>nice</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2be52dc37e8448d28c7bb3ca40ce6abe~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>1.gif</p><h2 id="change-case"><a href="#change-case" class="headerlink" title="change-case"></a>change-case</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c171b6a4c42e4cbda724dfb9fa2ddd85~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>快速切换变量格式，什么大坨峰，小驼峰，下划线等等，它里面有很多类型。使用方法按 <code>F1（windows）</code> &nbsp;，输入对应命令即可。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb9b73505bee4b2b9b36846012e4a16f~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>44.gif</p><h2 id="CSS-Peek"><a href="#CSS-Peek" class="headerlink" title="CSS Peek"></a>CSS Peek</h2><p>可以通过点击类名迅速定位到样式的定义。不知道是不是我自己的原因，有的时候会失效，需要点击 <strong>禁用</strong> ，再点击 <strong>启用</strong> 就好使了。具体使用方法参考链接</p><p>👉👉 cssPeek插件大大提升你的开发效率</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34df604892794422a557de2fb5f1b881~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><h2 id="ECMAScript-Quotes-Transformer"><a href="#ECMAScript-Quotes-Transformer" class="headerlink" title="ECMAScript Quotes Transformer"></a>ECMAScript Quotes Transformer</h2><p>用于 <strong>模板字符串</strong> 和 <strong>普通字符串拼接</strong> 的相互转化，但其实我日常开发基本上都是统一使用模板字符串的，很少有这种互相转化的需求。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4f86cf05cc44b6ba16c5cfda5fb799a~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>用法也是非常简单，选中需要转化的行，按 <code>f1</code> 输入命令即可，一般输入 <code>esq</code> 就出现提示了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf9d722082f34166bfff6107d0f69701~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>1.gif</p><h2 id="embrace"><a href="#embrace" class="headerlink" title="embrace"></a>embrace</h2><p>快速的在选中代码两边添加各种引号、括号，不用来回移动光标，不过好像现在市面上的编辑器大多都内置这功能了吧🤨🤨</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c0ddb34cb794bdbaf2f2968ffc93893~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="File-Utils"><a href="#File-Utils" class="headerlink" title="File Utils"></a>File Utils</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/357d3b90ef004df7b0a6bdb8a4fde56e~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>创建，复制，移动，重命名，删除文件和目录的便捷方法，演示图片来自官网。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5b66c0fbf8b4281932969f474cf0e4a~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><h2 id="javascript-console-utils"><a href="#javascript-console-utils" class="headerlink" title="javascript console utils"></a>javascript console utils</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb792f4f004e40d9bde52a33032de48f~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>前端人员的调试少不了 <code>console.log</code> ，那么这就是一款快速生成 <code>console.log</code> 的插件。使用方法非常简单， 选中变量，然后按 <code>ctrl + shift + L</code> 就可以生成了。需要删除的时候按 <code>ctrl + shift + D</code> 即可删除。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f13e10766c064e2b84a3c72fb1150363~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><h2 id="json2ts"><a href="#json2ts" class="headerlink" title="json2ts"></a>json2ts</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb1f1fe1da784db983cd5a5f31e2ba98~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>自动把 <code>json</code> 格式转成 <code>ts</code> 的类型，复制 <code>json</code> 之后按 <code>ctrl + alt + v</code> 即可。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9a2e3e897b44658a699648ddde72547~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><h2 id="koroFileHeader"><a href="#koroFileHeader" class="headerlink" title="koroFileHeader"></a>koroFileHeader</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/667d8e31624346fca4b6ab331d2dd0f4~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>自动添加 <strong>头部注释</strong> 和 <strong>函数注释</strong> 的插件。支持自定义内容，需要在 <code>settings.json</code> 中进行自定义配置。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56c7c42a76e14272ab8c1a91e7921e35~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><pre class="line-numbers language-none"><code class="language-none">&nbsp;&nbsp;//自动生成注释插件&nbsp;&nbsp;文件头部注释&nbsp;&nbsp;"fileheader.customMade":&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;"Author":&nbsp;"一尾流莺",&nbsp;&nbsp;&nbsp;&nbsp;"Description":&nbsp;"",&nbsp;&nbsp;&nbsp;&nbsp;"Date":&nbsp;"Do&nbsp;not&nbsp;edit",&nbsp;&nbsp;&nbsp;&nbsp;"LastEditTime":&nbsp;"Do&nbsp;not&nbsp;edit",&nbsp;&nbsp;&nbsp;&nbsp;"FilePath":&nbsp;""&nbsp;&nbsp;},&nbsp;&nbsp;//自动生成注释插件&nbsp;&nbsp;函数注释&nbsp;&nbsp;"fileheader.cursorMode":&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;"description":&nbsp;"",&nbsp;&nbsp;&nbsp;&nbsp;"param":&nbsp;"",&nbsp;&nbsp;&nbsp;&nbsp;"return":&nbsp;""&nbsp;&nbsp;},复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mithril-Emmet"><a href="#Mithril-Emmet" class="headerlink" title="Mithril Emmet"></a>Mithril Emmet</h2><p>快速生成代码结构，不过好像新版本 <code>vscode</code> 已经内置了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/618be88262cf4526a1f4f76b5f50c817~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a>Path Intellisense</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60fd219fae3045ed82328f9d811c3861~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>引入文件的时候，路径自动补全。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20ebb09e456e4aa9869675a5179d5db5~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>我们创建了一个高质量的技术交流群，与优秀的人在一起，自己也会优秀起来，赶紧<a href="https://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&amp;mid=2247554212&amp;idx=4&amp;sn=609c66e339d7345ab00205da2abb8f9e&amp;chksm=9bd3b93caca4302ad7fd37133fb45f526d4268914a5f65839285adbd5dc7c77b057168f4a8d5&amp;scene=21&amp;token=2077530613&amp;lang=zh_CN#wechat_redirect">点击加群</a>，享受一起成长的快乐。另外，如果你最近想跳槽的话，年前我花了2周时间收集了一波大厂面经，节后准备跳槽的可以<a href="https://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&amp;mid=2247553608&amp;idx=4&amp;sn=990e8a0f112e82cbc8051c4e50de32a6&amp;chksm=9bd3bfd0aca436c6f2d2921212ecfee430b9f4bc549e6eaf823786cae54e0bb1b5bd75a2f94d&amp;scene=21&amp;token=2077530613&amp;lang=zh_CN#wechat_redirect">点击这里领取</a>！</p><h2 id="Npm-Intellisense"><a href="#Npm-Intellisense" class="headerlink" title="Npm Intellisense"></a>Npm Intellisense</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e44443da76cd490293d4f46756ae4531~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>导入 <code>npm</code> 包的时候，智能提示。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcb256a70bae431584c961d22d270189~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>444.gif</p><h2 id="px-to-rem-amp-rpx-cssrem"><a href="#px-to-rem-amp-rpx-cssrem" class="headerlink" title="px to rem &amp; rpx (cssrem)"></a>px to rem &amp; rpx (cssrem)</h2><p>自动换算单位的插件。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec17ac1cdb9e4f6d9151ecabddd7f5fa~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>很简单，出现提示以后回车即可。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f6775ac6ba04c1b9de205ef7bd9b39b~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>1.gif</p><h2 id="Turbo-Console-Log"><a href="#Turbo-Console-Log" class="headerlink" title="Turbo Console Log"></a>Turbo Console Log</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d16432ab710f4892bd28ce6140486921~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>另一个用来生成 <code>console.log</code> 的插件，不同的是，他支持自定义 <code>console.log</code> 的内容，包括文件名，路径，大小等，还可以添加自己喜欢的 <code>emoji</code> 表情，快捷键 <code>ctrl + alt + L</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3fa4ec32fe7c486ca8cbe8230e9b267c~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="代码片段类插件"><a href="#代码片段类插件" class="headerlink" title="代码片段类插件"></a>代码片段类插件</h2><p>这一类的插件都很多，但功能都是提供代码片段，作用就是使用几个字符的简写，就可以敲出整段代码。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd10752761124371acd52bd7a6df5c50~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><ul><li><p><strong>JavaScript (ES6) code snippets</strong></p></li><li><p><strong>Jest Snippets</strong></p></li><li><p><strong>HTML Snippets</strong></p></li><li><p><strong>Vue VSCode Snippets</strong></p></li><li><p><strong>Vue 3 Snippets</strong></p></li><li><p><strong>… …</strong></p></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7370f043ec3434f819afabbbcdb7130~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>3.gif</p><h1 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h1><h2 id="Beautify"><a href="#Beautify" class="headerlink" title="Beautify"></a>Beautify</h2><p>用来代码格式化的，但是我好像安装了没怎么用，我一直都是 <code>eslint + prettier</code>，有正在用的小伙伴可以在评论区发表一下看法，感兴趣的请自己搜索使用方法。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd90d71e09d4415297e570e041e77efe~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p>这个就不用说了吧，代码检查，不符合规范的就会跟你报错，或者警告。具体的规范需要在根目录下新建 <code>.eslintrc.js</code> 文件去配置，也可以用很多大公司现有的规范，太复杂了就不细讲了，贴出教程链接。</p><p>👉👉Eslint 超简单入门教程</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39faad7becb64dada108fb205af2ee54~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a>Prettier - Code formatter</h2><p>代码格式化插件，这个插件通常搭配 <code>eslint</code> 使用，也可以单独使用。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82f0c40ca43848f6bcf48d55b50c27eb~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>在根目录下新建 <code>.prettierrc.json</code> 文件，在里面书写自己想要的格式就行了。更具体的配置内容查看链接</p><p>👉👉 # vscode 使用Prettier插件格式化配置使用</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d42400e942eb40038531491f2ea1c16e~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="vetur-x2F-volar"><a href="#vetur-x2F-volar" class="headerlink" title="vetur / volar"></a>vetur / volar</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d544124ef9d343ef9360d552a1c7dc25~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4995e4d8a0c74990b6d574a2195accbb~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>使用 <code>vue</code> 进行开发的小伙伴都少不了跟它们打交道，<code>volar</code> 是跟 <code>vue3</code> 更配的，功能也能多，由于这两个插件功能过于庞大，就不展开讲了，感兴趣的自行搜索使用。</p><p>我们创建了一个高质量的技术交流群，与优秀的人在一起，自己也会优秀起来，赶紧<a href="https://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&amp;mid=2247554212&amp;idx=4&amp;sn=609c66e339d7345ab00205da2abb8f9e&amp;chksm=9bd3b93caca4302ad7fd37133fb45f526d4268914a5f65839285adbd5dc7c77b057168f4a8d5&amp;scene=21&amp;token=2077530613&amp;lang=zh_CN#wechat_redirect">点击加群</a>，享受一起成长的快乐。另外，如果你最近想跳槽的话，年前我花了2周时间收集了一波大厂面经，节后准备跳槽的可以<a href="https://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&amp;mid=2247553608&amp;idx=4&amp;sn=990e8a0f112e82cbc8051c4e50de32a6&amp;chksm=9bd3bfd0aca436c6f2d2921212ecfee430b9f4bc549e6eaf823786cae54e0bb1b5bd75a2f94d&amp;scene=21&amp;token=2077530613&amp;lang=zh_CN#wechat_redirect">点击这里领取</a>！</p><h1 id="其他好玩的插件"><a href="#其他好玩的插件" class="headerlink" title="其他好玩的插件"></a>其他好玩的插件</h1><p>除了功能性插件，当然还有很多花里胡哨的玩意。下面给大家介绍几款可能对开发影响不大，但是非常好玩的插件。</p><h2 id="小霸王"><a href="#小霸王" class="headerlink" title="小霸王"></a>小霸王</h2><p>还记得小时候玩的手柄游戏吗？大佬已经给我们出了插件了，不过我还是要友情提醒一句：游戏有风险，摸鱼需谨慎！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27452e457eba448a9cd77168ce4b2e5d~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>操作非常简单，安装完左侧会出现游戏手柄图标，点击打开就可以下载游戏进行玩耍。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a5e3462cb49402e818ecf927fee270c~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><h2 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf6b3a24ccd14c64aaddcd3003811a79~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>在代码中添加 <code>emoji</code> 表情，我自己除了写一些注释，<code>console.log</code> 之外，基本没有别的作用，但是挺好玩的，别人看你的代码中各种小表情，也会觉得你是一个可爱的人吧。</p><p>它的官方示例里面还可以把 <code>emoji</code> 设为变量名，我可不建议你们这样做。使用方法也是非常的简单，按 <code>f1（windows）</code> 输入 <code>emoji</code> ，可以看到有三个选项，分别是 <code>emoji</code> 表情，<code>markdown</code> 下的 <code>emoji</code>，还有 <code>unicode</code> 下的 <code>emoji</code>。选中一个模式回车进入列表，再回车就可以输入到代码中了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1be307d4ecc7489eaae07ae5366fefc7~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>2.gif</p><h2 id="Settings-Sync"><a href="#Settings-Sync" class="headerlink" title="Settings Sync"></a>Settings Sync</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5a07003809e47f1af6313768d4f21e0~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>image.png</p><p>可以同步 <code>vscode</code> 配置的插件，由于我没有换过电脑，所以还没亲测，但是网上用的人还是蛮多的。</p><p>联系小熊：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56e27a85e79a46c3b0665fa5160ce153~tplv-k3u1fbpfcp-watermark.image" alt="wx.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐一个基于 Spring Boot + Mybatis + Vue 的代码生成器</title>
      <link href="/2022/05/19/tui-jian-yi-ge-ji-yu-spring-boot-mybatis-vue-de-dai-ma-sheng-cheng-qi/"/>
      <url>/2022/05/19/tui-jian-yi-ge-ji-yu-spring-boot-mybatis-vue-de-dai-ma-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<p><em><strong>1.</strong></em> 简介  </p><hr><p>一款代码生成工具，可自定义模板生成不同的代码，支持MySQL、Oracle、SQL Server、PostgreSQL。</p><ul><li>只需要一个 Java8 环境，下载后即可运行使用。</li><li>步骤简单，只需配置一个数据源，然后勾选模板即可生成代码。</li><li>默认提供了通用的实体类、mybatis接口、mybatis配置文件模板，可以快速开发mybatis应用。</li></ul><h2 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a><em><strong>2.</strong></em> 使用步骤</h2><ul><li><p>前往发行版页面，下载最新版本zip文件</p></li><li><p>解压zip，如果是Mac/Linux操作系统，运行startup.sh文件启动，Windows操作系统运行cmd输入java -jar gen.jar启动</p></li><li><p>浏览器访问<a href="http://localhost:6969/">http://localhost:6969/</a></p></li><li><p>默认端口是6969，更改端口号按如下方式</p></li><li><p>Mac/Linux操作系统：打开startup.sh文件，修改–server.port参数值</p></li><li><p>Windows操作系统：可执行：java -jar gen.jar –server.port=端口号</p></li></ul><h2 id="3-工程说明"><a href="#3-工程说明" class="headerlink" title="3. 工程说明"></a><em><strong>3.</strong></em> 工程说明</h2><ul><li><p>front：前端vue</p></li><li><p>gen：后端服务</p></li><li><p>db：数据库初始化文件</p></li><li><p>script：辅助脚本</p></li></ul><h2 id="4-效果图"><a href="#4-效果图" class="headerlink" title="4. 效果图"></a><em><strong>4.</strong></em> 效果图</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82520abe6a8c43df80356825253d31fd~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" title="null"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb9f0aadda1f410c8566b6fd5a8d6a49~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" title="null"></p><p><strong><em>5.</em></strong> 项目地址</p><p>开源地址：<a href="https://github.com/zhangdaiscott/jeecg-boot">https://github.com/zhangdaiscott/jeecg-boot</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门篇</title>
      <link href="/2022/05/09/docker-ru-men-pian/"/>
      <url>/2022/05/09/docker-ru-men-pian/</url>
      
        <content type="html"><![CDATA[<p>参考：</p><p>菜鸟教程：</p><p> <a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a> </p><p>狂神docker：</p><p> <a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=1">https://www.bilibili.com/video/BV1og4y1q7M4?p=1</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h3><p>查看Linux系统版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># uname -r</span><span class="token number">4.18</span>.0-193.28.1.el8_2.x86_64<span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/os-release</span><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"CentOS Linux"</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token string">"8 (Core)"</span><span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token string">"centos"</span><span class="token assign-left variable">ID_LIKE</span><span class="token operator">=</span><span class="token string">"rhel fedora"</span><span class="token assign-left variable">VERSION_ID</span><span class="token operator">=</span><span class="token string">"8"</span><span class="token assign-left variable">PLATFORM_ID</span><span class="token operator">=</span><span class="token string">"platform:el8"</span><span class="token assign-left variable">PRETTY_NAME</span><span class="token operator">=</span><span class="token string">"CentOS Linux 8 (Core)"</span><span class="token assign-left variable">ANSI_COLOR</span><span class="token operator">=</span><span class="token string">"0;31"</span><span class="token assign-left variable">CPE_NAME</span><span class="token operator">=</span><span class="token string">"cpe:/o:centos:centos:8"</span><span class="token assign-left variable">HOME_URL</span><span class="token operator">=</span><span class="token string">"https://www.centos.org/"</span><span class="token assign-left variable">BUG_REPORT_URL</span><span class="token operator">=</span><span class="token string">"https://bugs.centos.org/"</span><span class="token assign-left variable">CENTOS_MANTISBT_PROJECT</span><span class="token operator">=</span><span class="token string">"CentOS-8"</span><span class="token assign-left variable">CENTOS_MANTISBT_PROJECT_VERSION</span><span class="token operator">=</span><span class="token string">"8"</span><span class="token assign-left variable">REDHAT_SUPPORT_PRODUCT</span><span class="token operator">=</span><span class="token string">"centos"</span><span class="token assign-left variable">REDHAT_SUPPORT_PRODUCT_VERSION</span><span class="token operator">=</span><span class="token string">"8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h4><blockquote><p>为了避免诸多使用者对 Linux 系统目录结构天马行空，Linux 基金会发布了 FHS 标准</p><p>FHS（Filesystem Hierarchy Standard），文件系统层次化标准，该标准规定了 Linux 系统中所有一级目录以及部分二级目录（/usr 和 /var）的用途。发布此标准的主要目的就是为了让用户清楚地了解每个目录应该存放什么类型的文件。 </p><p>FHS 认为，Linux 系统的根目录（/）最为重要（没有之一），其原因有以下 2 点：</p><ol><li><p>所有目录都是由根目录衍生出来的；</p></li><li><p>根目录与系统的开机、修复、还原密切相关；</p><p>因此，根目录必须包含开机软件、核心文件、开机所需程序、函数库、修复系统程序等文件，如表所示</p></li></ol></blockquote><p> <img src="/./Docker%E5%85%A5%E9%97%A8%E7%AF%87/2-1Z5061A1003X.gif" alt="Linux系统文件和目录组织示意图"> </p><table><thead><tr><th>一级目录</th><th>功能（作用）</th></tr></thead><tbody><tr><td>/bin/</td><td>存放系统命令，普通用户和 root 都可以执行。放在 /bin 下的命令在单用户模式下也可以执行</td></tr><tr><td>/boot/</td><td>系统启动目录，保存与系统启动相关的文件，如内核文件和启动引导程序（grub）文件等</td></tr><tr><td>/dev/</td><td>设备文件保存位置</td></tr><tr><td>/etc/</td><td>配置文件保存位置。系统内所有采用默认安装方式（rpm 安装）的服务配置文件全部保存在此目录中，如用户信息、服务的启动脚本、常用服务的配置文件等</td></tr><tr><td>/home/</td><td>普通用户的主目录（也称为家目录）。在创建用户时，每个用户要有一个默认登录和保存自己数据的位置，就是用户的主目录，所有普通用户的主目录是在 /home/ 下建立一个和用户名相同的目录。如用户 liming 的主目录就是 /home/liming</td></tr><tr><td>/lib/</td><td>系统调用的函数库保存位置</td></tr><tr><td>/media/</td><td>挂载目录。系统建议用来挂载媒体设备，如软盘和光盘</td></tr><tr><td>/mnt/</td><td>挂载目录。早期 Linux 中只有这一个挂载目录，并没有细分。系统建议这个目录用来挂载额外的设备，如 U 盘、移动硬盘和其他操作系统的分区</td></tr><tr><td>/misc/</td><td>挂载目录。系统建议用来挂载 NFS 服务的共享目录。虽然系统准备了三个默认挂载目录 /media/、/mnt/、/misc/，但是到底在哪个目录中挂载什么设备可以由管理员自己决定。例如，笔者在接触 Linux 的时候，默认挂载目录只有 /mnt/，所以养成了在 /mnt/ 下建立不同目录挂载不同设备的习惯，如 /mnt/cdrom/ 挂载光盘、/mnt/usb/ 挂载 U 盘，都是可以的</td></tr><tr><td>/opt/</td><td>第三方安装的软件保存位置。这个目录是放置和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中。不过笔者还是习惯把软件放到 /usr/local/ 目录中，也就是说，/usr/local/ 目录也可以用来安装软件</td></tr><tr><td>/root/</td><td>root 的主目录。普通用户主目录在 /home/ 下，root 主目录直接在“/”下</td></tr><tr><td>/sbin/</td><td>保存与系统环境设置相关的命令，只有 root 可以使用这些命令进行系统环境设置，但也有些命令可以允许普通用户查看</td></tr><tr><td>/srv/</td><td>服务数据目录。一些系统服务启动之后，可以在这个目录中保存所需要的数据</td></tr><tr><td>/tmp/</td><td>临时目录。系统存放临时文件的目录，在该目录下，所有用户都可以访问和写入。建议此目录中不能保存重要数据，最好每次开机都把该目录清空</td></tr></tbody></table><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Linux sudo命令以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root亲自执行 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Linux-vi-x2F-vim"><a href="#Linux-vi-x2F-vim" class="headerlink" title="Linux vi/vim"></a>Linux vi/vim</h4><blockquote><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>但是目前我们使用比较多的是 vim 编辑器。</p><p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p></blockquote><p><a href="https://www.runoob.com/linux/linux-vim.html">https://www.runoob.com/linux/linux-vim.html</a> </p><p><img src="/assets/vi-vim-cheat-sheet-sch.gif" alt="img"> </p><h4 id="Linux-yum-命令"><a href="#Linux-yum-命令" class="headerlink" title="Linux yum 命令"></a>Linux yum 命令</h4><blockquote><p>yum（ Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 SUSE 中的 Shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。</p><p>yum 提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p></blockquote><p> <a href="https://www.runoob.com/linux/linux-yum.html">https://www.runoob.com/linux/linux-yum.html</a> </p><pre class="line-numbers language-none"><code class="language-none">yum [options] [command] [package ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>options：</strong>可选，选项包括-h（帮助）</p><p>-y（当安装过程提示选择全部为 “yes”），-q（不显示安装的过程）等等。</p></li><li><p><strong>command：</strong>要进行的操作。</p></li><li><p><strong>package：</strong>安装的包名。</p></li></ul><blockquote><ul><li>列出所有可更新的软件清单命令：<strong>yum check-update</strong></li><li>更新所有软件命令：<strong>yum update</strong></li><li>仅安装指定的软件命令：**yum install **</li><li>仅更新指定的软件命令：**yum update **</li><li>列出所有可安裝的软件清单命令：<strong>yum list</strong></li><li>删除软件包命令：**yum remove **</li><li>查找软件包命令：**yum search **</li><li>清除缓存命令:<ul><li><strong>yum clean packages</strong>: 清除缓存目录下的软件包</li><li><strong>yum clean headers</strong>: 清除缓存目录下的 headers</li><li><strong>yum clean oldheaders</strong>: 清除缓存目录下旧的 headers</li><li><strong>yum clean, yum clean all (= yum clean packages; yum clean oldheaders)</strong> :清除缓存目录下的软件包及旧的 headers</li></ul></li></ul></blockquote><h4 id="Linux-apt-命令"><a href="#Linux-apt-命令" class="headerlink" title="Linux apt 命令"></a>Linux apt 命令</h4><blockquote><p>apt（Advanced Packaging Tool）是一个在 Debian 和 Ubuntu 中的 Shell 前端软件包管理器。</p><p>apt 命令提供了查找、安装、升级、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p><p>apt 命令执行需要超级管理员权限(root)。</p></blockquote><p> <a href="https://www.runoob.com/linux/linux-comm-apt.html">https://www.runoob.com/linux/linux-comm-apt.html</a> </p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>官方centos安装docker文档： <a href="https://docs.docker.com/engine/install/centos/#uninstall-docker-engine">https://docs.docker.com/engine/install/centos/#uninstall-docker-engine</a> </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、卸载旧版本<span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>                  docker-client <span class="token punctuation">\</span>                  docker-client-latest <span class="token punctuation">\</span>                  docker-common <span class="token punctuation">\</span>                  docker-latest <span class="token punctuation">\</span>                  docker-latest-logrotate <span class="token punctuation">\</span>                  docker-logrotate <span class="token punctuation">\</span>                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你在一台新机器上安装Docker引擎，你需要设置Docker仓库，然后你可以安装和更新Docker从这个仓库中。</p><p>安装 <code>yum-utils</code> 包 (提供 <code>yum-config-manager</code> 管理) 并且设置一个可靠稳定的仓库（国内使用阿里云镜像仓库）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2</span>、需要的yum-utils包<span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils<span class="token number">3</span>、配置镜像仓库<span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\</span>    --add-repo <span class="token punctuation">\</span>    http://mirrors.aliyun.com/    https://download.docker.com/linux/centos/docker-ce.repo   <span class="token comment">#默认是国外的</span>    yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token comment">#推荐使用阿里云</span>    更新yum软件包索引yum makecache fast<span class="token number">4</span>、安装docker  安装最新版本<span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.ioyum list docker-ce --showduplicates <span class="token operator">|</span> <span class="token function">sort</span> -r<span class="token comment">#列出所有可用版本</span><span class="token number">5</span>、启动docker<span class="token function">sudo</span> systemctl start <span class="token function">docker</span><span class="token number">6</span>、测试helloworld<span class="token function">sudo</span> <span class="token function">docker</span> run hello-world<span class="token number">7</span>、查看下载的hello-world镜像<span class="token function">docker</span> images<span class="token number">8</span>、卸载docker<span class="token function">sudo</span> yum remove docker-ce docker-ce-cli containerd.io<span class="token comment">#卸载依赖</span><span class="token function">sudo</span> <span class="token function">rm</span> -rf /var/lib/docker<span class="token comment">#删除文件（docker默认工作路径）</span><span class="token function">sudo</span> <span class="token function">rm</span> -rf /var/lib/containerd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试成功：</p><img src="./Docker入门篇/1615556754536.png" alt="1615556754536" style="zoom:80%;margin:0"><img src="./Docker入门篇/1615556890719.png" alt="1615556890719" style="zoom:80%;"><h3 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h3><p>右侧产品与服务 -&gt;  容器镜像服务  -&gt; 镜像加速器</p><p><img src="/assets/1615555191366.png" alt="1615555191366"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'{  "registry-mirrors": ["https://i33ecd8u.mirror.aliyuncs.com"]}EOF</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yum仓库镜像管理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum repolist all<span class="token comment">#列出所有仓库</span>yum-config-manager --disable mirrors.aliyun.com_<span class="token comment">#禁用该仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="运行docker-run-hello-world"><a href="#运行docker-run-hello-world" class="headerlink" title="运行docker run hello-world"></a>运行docker run hello-world</h3><img src="Docker入门篇/1615556551891.png" alt="1615556551891"><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p><strong>docker是怎么工作的呢？</strong></p><p><img src="/assets/1615557032084.png" alt="1615557032084"></p><p><strong>docker为什么比虚拟机VM快？</strong></p><p>1、docker有着比虚拟机更少的抽象层</p><p>2、docker利用宿主机的内核，vm需要Guest OS</p> <img src="Docker入门篇/1615557412769.png" alt="1615557412769" style="zoom: 50%;"> <img src="Docker入门篇/1615557282724.png" alt="1615557282724" style="zoom:80%;"><p>因此，当新建一个容器时，Docker不需要和虚拟机一样重新加载一个操作系统，避免了引导、加载操作系统内核这个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的，而Docker由于直接利用宿主机的操作系统则省略了这个过程，因此新建一个Docker容器只需要几秒钟。 </p><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><p><a href="https://docs.docker.com/engine/reference/commandline">https://docs.docker.com/engine/reference/commandline</a> </p><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> version<span class="token comment">#版本</span><span class="token function">docker</span> info<span class="token comment">#显示docker系统信息 包括镜像和容器数量</span><span class="token function">docker</span> --help<span class="token comment">#帮助</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images<span class="token comment">#所有镜像</span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY    TAG       IMAGE ID       CREATED         SIZEhello-world   latest    bf756fb1ae65   <span class="token number">14</span> months ago   <span class="token number">13</span>.3kB<span class="token comment">#REPOSITORY</span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># docker images --help</span>Usage:  <span class="token function">docker</span> images <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span>List imagesOptions:  -a, --all             Show all images <span class="token punctuation">(</span>default hides intermediate images<span class="token punctuation">)</span>      --digests         Show digests  -f, --filter filter   Filter output based on conditions provided      --format string   Pretty-print images using a Go template      --no-trunc        Don't truncate output  -q, --quiet           Only show image IDs<span class="token comment">#我们用的比较多</span><span class="token function">docker</span> images -aq<span class="token comment">#显示所有镜像的ID</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><p><a href="https://hub.docker.com/search?type=image">https://hub.docker.com/search?type=image</a>      docker-hub仓库搜索</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> search xxx<span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># docker search mysql</span>NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDmysql                             MySQL is a widely used, open-source relation…   <span class="token number">10600</span>     <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>       mariadb                           MariaDB Server is a high performing <span class="token function">open</span> sou…   <span class="token number">3973</span>      <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>       mysql/mysql-server                Optimized MySQL Server Docker images. Create…   <span class="token number">778</span>                  <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>percona                           Percona Server is a fork of the MySQL relati…   <span class="token number">528</span>       <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>       <span class="token comment">#带过滤条件的搜索</span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># docker search mysql --filter=STARS=3000</span>NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDmysql     MySQL is a widely used, open-source relation…   <span class="token number">10600</span>     <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>       mariadb   MariaDB Server is a high performing <span class="token function">open</span> sou…   <span class="token number">3973</span>      <span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># docker pull mysql</span>Using default tag: latest<span class="token comment">#不指定版本默认下载最新的</span>latest: Pulling from library/mysqla076a628af6f: Pull complete <span class="token comment">#分层下载,docker image核心 联合文件系统</span>f6c208f3f991: Pull complete 88a9455a9165: Pull complete 406c9b8427c6: Pull complete 7c88599c0b25: Pull complete 25b5c6debdaf: Pull complete 43a5816f1617: Pull complete 1a8c919e89bf: Pull complete 9f3cf4bd1a07: Pull complete 80539cea118d: Pull complete 201b3cad54ce: Pull complete 944ba37e1c06: Pull complete Digest: sha256:feada149cb8ff54eade1336da7c1d080c4a1c7ed82b5e320efb5beebed85ae8cStatus: Downloaded newer image <span class="token keyword">for</span> mysql:latestdocker.io/library/mysql:latest<span class="token comment">#真实的地址</span><span class="token comment">#下面是等价的</span><span class="token function">docker</span> pull mysql<span class="token function">docker</span> pull docker.io/library/mysql:latest<span class="token comment">#指定版本下载</span><span class="token comment">#注意版本一定要在docker-hub中存在</span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># docker pull mysql:5.7</span><span class="token number">5.7</span>: Pulling from library/mysqla076a628af6f: Already exists <span class="token comment">#发现linux中已存在的部分 可以复用</span>f6c208f3f991: Already exists 88a9455a9165: Already exists 406c9b8427c6: Already exists 7c88599c0b25: Already exists 25b5c6debdaf: Already exists 43a5816f1617: Already exists 1831ac1245f4: Pull complete 37677b8c1f79: Pull complete 27e4ac3b0f6e: Pull complete 7227baa8c445: Pull complete Digest: sha256:b3d1eff023f698cd433695c9506171f0d08a8f92a0c8063c1a4d9db9a55808dfStatus: Downloaded newer image <span class="token keyword">for</span> mysql:5.7docker.io/library/mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi -f 镜像id<span class="token comment">#-f强制删除 remove image</span><span class="token function">docker</span> rmi -f bf756fb1ae65<span class="token comment">#删除所有镜像</span><span class="token function">docker</span> rmi -f <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images -qa<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p>说明：我们有了镜像才可以创建容器，Linux下载一个centos容器来学习吧</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>容器不存在就先下载后启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> image举例：<span class="token function">docker</span> run -it centos /bin/bash<span class="token comment">#参数说明</span>--name<span class="token operator">=</span><span class="token string">"容器名字"</span>-d<span class="token comment">#后台启动</span>-it<span class="token comment"># -i 交互模式 -t 进入容器查看内容</span>-p<span class="token comment">#指定容器端口</span>-p ip:主机端口:容器端口-p 主机端口:容器端口（常用）-p 容器端口-P<span class="token comment">#随机指定端口</span><span class="token comment">##测试</span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ /<span class="token punctuation">]</span><span class="token comment"># ls</span>bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span class="token comment">#以交互模式进入centos容器，后面的/bin/bash的作用是表示载入容器后运行bash ,docker中必须要保持一个进程的#运行，要不然整个容器启动后就会马上kill itself，这个/bin/bash就表示启动容器后启动bash</span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ /<span class="token punctuation">]</span><span class="token comment"># docker run -it centos /bin/bash</span><span class="token comment">#列出容器centos中的目录</span><span class="token punctuation">[</span>root@8eaefe58fb89 /<span class="token punctuation">]</span><span class="token comment"># ls</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span class="token comment">#关闭容器 回到宿主机桌面 </span><span class="token punctuation">[</span>root@8eaefe58fb89 /<span class="token punctuation">]</span><span class="token comment"># exit</span><span class="token builtin class-name">exit</span><span class="token comment">#查看正在运行的容器</span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ /<span class="token punctuation">]</span><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ /<span class="token punctuation">]</span><span class="token comment"># docker run -it centos /bin/bash</span><span class="token comment">#快捷键Ctrl+Q+P  以不关闭容器的方式退出</span><span class="token punctuation">[</span>root@15e74bbab5cf /<span class="token punctuation">]</span><span class="token comment"># </span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ /<span class="token punctuation">]</span><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES15e74bbab5cf   centos    <span class="token string">"/bin/bash"</span>   <span class="token number">50</span> seconds ago   Up <span class="token number">49</span> seconds             eloquent_bell<span class="token comment">#列出所有容器，包括退出的记录</span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ /<span class="token punctuation">]</span><span class="token comment"># docker ps -a</span>CONTAINER ID   IMAGE          COMMAND       CREATED              STATUS                          PORTS     NAMES15e74bbab5cf   centos         <span class="token string">"/bin/bash"</span>   <span class="token number">57</span> seconds ago       Up <span class="token number">56</span> seconds                             eloquent_bell8eaefe58fb89   centos         <span class="token string">"/bin/bash"</span>   About a minute ago   Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> About a minute ago             busy_cerf64546a75742e   centos         <span class="token string">"/bin/bash"</span>   <span class="token number">3</span> minutes ago        Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">3</span> minutes ago                  charming_chaum559333bc61f7   python         <span class="token string">"python3"</span>     <span class="token number">11</span> hours ago         Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">11</span> hours ago                   charming_galois77e776fa3d06   bf756fb1ae65   <span class="token string">"/hello"</span>      <span class="token number">14</span> hours ago         Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">14</span> hours ago                   adoring_kapitsa5a2e92059d9f   bf756fb1ae65   <span class="token string">"/hello"</span>      <span class="token number">14</span> hours ago         Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">14</span> hours ago                   funny_colden<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> 容器id<span class="token comment">#删除指定容器</span><span class="token function">docker</span> <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> -aq<span class="token variable">)</span></span><span class="token comment">#强制删除所有容器</span><span class="token function">docker</span> <span class="token function">ps</span> -aq<span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span><span class="token comment">#删除所有容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="启动-x2F-停止容器操作"><a href="#启动-x2F-停止容器操作" class="headerlink" title="启动/停止容器操作"></a>启动/停止容器操作</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start 容器id<span class="token function">docker</span> restart 容器id<span class="token function">docker</span> stop 容器id<span class="token function">docker</span> <span class="token function">kill</span> 容器id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h3><h4 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ /<span class="token punctuation">]</span><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ /<span class="token punctuation">]</span><span class="token comment"># docker run -d centos</span>cb7e6d2b662be910b3ff857b5e60c3b92f24736df5929eee88e3237388c1258f<span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ /<span class="token punctuation">]</span><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span class="token comment">#这里有一个坑？后台启动后为什么docker ps没有呢？</span><span class="token comment">#docker使用后台运行必须要有一个前台进程运行，要不然整个容器启动后就会马上kill itself</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER  -f, --follow         Follow log output      --since string   Show logs since timestamp <span class="token punctuation">(</span>e.g. <span class="token number">2013</span>-01-02T13:23:37Z<span class="token punctuation">)</span> or relative <span class="token punctuation">(</span>e.g. 42m <span class="token keyword">for</span> <span class="token number">42</span> minutes<span class="token punctuation">)</span>  -n, --tail string    Number of lines to show from the end of the logs <span class="token punctuation">(</span>default <span class="token string">"all"</span><span class="token punctuation">)</span>  -t, --timestamps     Show timestamps  <span class="token function">docker</span> logs -tf --tail <span class="token number">10</span> 容器id<span class="token comment">#显示时间撮 并显示10条日志</span>  <span class="token function">docker</span> run -d centos <span class="token function">sh</span> -c <span class="token string">"while true; do <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token function">date</span><span class="token variable">)</span></span>; sleep 1; done"</span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># docker logs -f --until=2s c7e666c4f8f</span>Sat Mar <span class="token number">13</span> 05:02:22 UTC <span class="token number">2021</span>Sat Mar <span class="token number">13</span> 05:02:23 UTC <span class="token number">2021</span>Sat Mar <span class="token number">13</span> 05:02:24 UTC <span class="token number">2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="回到已经退出但仍在运行的容器"><a href="#回到已经退出但仍在运行的容器" class="headerlink" title="回到已经退出但仍在运行的容器"></a>回到已经退出但仍在运行的容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#方式1,进入正在运行容器的命令行</span><span class="token function">docker</span> attach 容器id<span class="token comment">#方式2： 进入正在运行容器并开一个新的cmd终端</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器ID bashShell<span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器ID /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看容器进程信息"><a href="#查看容器进程信息" class="headerlink" title="查看容器进程信息"></a>查看容器进程信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">top</span> 容器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/1615612361328.png" alt="1615612361328"></p><h4 id="查看镜像元数据"><a href="#查看镜像元数据" class="headerlink" title="查看镜像元数据"></a>查看镜像元数据</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token operator">|</span>ID <span class="token punctuation">[</span>NAME<span class="token operator">|</span>ID<span class="token punctuation">..</span>.<span class="token punctuation">]</span>Options:  -f, --format string   Format the output using the given Go template  -s, --size            Display total <span class="token function">file</span> sizes <span class="token keyword">if</span> the <span class="token builtin class-name">type</span> is container      --type string     Return JSON <span class="token keyword">for</span> specified <span class="token builtin class-name">type</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># docker inspect c7e666c4f8f9</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"Id"</span><span class="token builtin class-name">:</span> <span class="token string">"c7e666c4f8f9b574ddbc674ad5434f45ab5542c25164a0358a17360df118595d"</span>,        <span class="token string">"Created"</span><span class="token builtin class-name">:</span> <span class="token string">"2021-03-13T05:02:21.586837064Z"</span>,        <span class="token string">"Path"</span><span class="token builtin class-name">:</span> <span class="token string">"sh"</span>,        <span class="token string">"Args"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>            <span class="token string">"-c"</span>,            <span class="token string">"while true; do date; sleep 1; done"</span>        <span class="token punctuation">]</span>,        <span class="token string">"State"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>            <span class="token string">"Status"</span><span class="token builtin class-name">:</span> <span class="token string">"running"</span>,            <span class="token string">"Running"</span><span class="token builtin class-name">:</span> true,            <span class="token string">"Paused"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"Restarting"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"OOMKilled"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"Dead"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"Pid"</span><span class="token builtin class-name">:</span> <span class="token number">429677</span>,            <span class="token string">"ExitCode"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"Error"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"StartedAt"</span><span class="token builtin class-name">:</span> <span class="token string">"2021-03-13T05:02:22.15665598Z"</span>,            <span class="token string">"FinishedAt"</span><span class="token builtin class-name">:</span> <span class="token string">"0001-01-01T00:00:00Z"</span>        <span class="token punctuation">}</span>,        <span class="token string">"Image"</span><span class="token builtin class-name">:</span> <span class="token string">"sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55"</span>,        <span class="token string">"ResolvConfPath"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/containers/c7e666c4f8f9b574ddbc674ad5434f45ab5542c25164a0358a17360df118595d/resolv.conf"</span>,        <span class="token string">"HostnamePath"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/containers/c7e666c4f8f9b574ddbc674ad5434f45ab5542c25164a0358a17360df118595d/hostname"</span>,        <span class="token string">"HostsPath"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/containers/c7e666c4f8f9b574ddbc674ad5434f45ab5542c25164a0358a17360df118595d/hosts"</span>,        <span class="token string">"LogPath"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/containers/c7e666c4f8f9b574ddbc674ad5434f45ab5542c25164a0358a17360df118595d/c7e666c4f8f9b574ddbc674ad5434f45ab5542c25164a0358a17360df118595d-json.log"</span>,        <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"/inspiring_sinoussi"</span>,        <span class="token string">"RestartCount"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,        <span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"overlay2"</span>,        <span class="token string">"Platform"</span><span class="token builtin class-name">:</span> <span class="token string">"linux"</span>,        <span class="token string">"MountLabel"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,        <span class="token string">"ProcessLabel"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,        <span class="token string">"AppArmorProfile"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,        <span class="token string">"ExecIDs"</span><span class="token builtin class-name">:</span> null,        <span class="token string">"HostConfig"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>            <span class="token string">"Binds"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"ContainerIDFile"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"LogConfig"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>                <span class="token string">"Type"</span><span class="token builtin class-name">:</span> <span class="token string">"json-file"</span>,                <span class="token string">"Config"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>,            <span class="token string">"NetworkMode"</span><span class="token builtin class-name">:</span> <span class="token string">"default"</span>,            <span class="token string">"PortBindings"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,            <span class="token string">"RestartPolicy"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>                <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"no"</span>,                <span class="token string">"MaximumRetryCount"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>            <span class="token punctuation">}</span>,            <span class="token string">"AutoRemove"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"VolumeDriver"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"VolumesFrom"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"CapAdd"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"CapDrop"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"CgroupnsMode"</span><span class="token builtin class-name">:</span> <span class="token string">"host"</span>,            <span class="token string">"Dns"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DnsOptions"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DnsSearch"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"ExtraHosts"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"GroupAdd"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"IpcMode"</span><span class="token builtin class-name">:</span> <span class="token string">"private"</span>,            <span class="token string">"Cgroup"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"Links"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"OomScoreAdj"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"PidMode"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"Privileged"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"PublishAllPorts"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"ReadonlyRootfs"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"SecurityOpt"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"UTSMode"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"UsernsMode"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"ShmSize"</span><span class="token builtin class-name">:</span> <span class="token number">67108864</span>,            <span class="token string">"Runtime"</span><span class="token builtin class-name">:</span> <span class="token string">"runc"</span>,            <span class="token string">"ConsoleSize"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token number">0</span>,                <span class="token number">0</span>            <span class="token punctuation">]</span>,            <span class="token string">"Isolation"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"CpuShares"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"Memory"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"NanoCpus"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"CgroupParent"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"BlkioWeight"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"BlkioWeightDevice"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"BlkioDeviceReadBps"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"BlkioDeviceWriteBps"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"BlkioDeviceReadIOps"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"BlkioDeviceWriteIOps"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"CpuPeriod"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"CpuQuota"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"CpuRealtimePeriod"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"CpuRealtimeRuntime"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"CpusetCpus"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"CpusetMems"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"Devices"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DeviceCgroupRules"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"DeviceRequests"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"KernelMemory"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"KernelMemoryTCP"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"MemoryReservation"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"MemorySwap"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"MemorySwappiness"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"OomKillDisable"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"PidsLimit"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"Ulimits"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"CpuCount"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"CpuPercent"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"IOMaximumIOps"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"IOMaximumBandwidth"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"MaskedPaths"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"/proc/asound"</span>,                <span class="token string">"/proc/acpi"</span>,                <span class="token string">"/proc/kcore"</span>,                <span class="token string">"/proc/keys"</span>,                <span class="token string">"/proc/latency_stats"</span>,                <span class="token string">"/proc/timer_list"</span>,                <span class="token string">"/proc/timer_stats"</span>,                <span class="token string">"/proc/sched_debug"</span>,                <span class="token string">"/proc/scsi"</span>,                <span class="token string">"/sys/firmware"</span>            <span class="token punctuation">]</span>,            <span class="token string">"ReadonlyPaths"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"/proc/bus"</span>,                <span class="token string">"/proc/fs"</span>,                <span class="token string">"/proc/irq"</span>,                <span class="token string">"/proc/sys"</span>,                <span class="token string">"/proc/sysrq-trigger"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>,        <span class="token string">"GraphDriver"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>            <span class="token string">"Data"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>                <span class="token string">"LowerDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/613a73f697772accc7124826f2e8c5a9442067194dac6725b4041bf31426b528-init/diff:/var/lib/docker/overlay2/a008a96ee1d2af62ede459a39bfa11d5e40acce53578d39720881d3828474860/diff"</span>,                <span class="token string">"MergedDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/613a73f697772accc7124826f2e8c5a9442067194dac6725b4041bf31426b528/merged"</span>,                <span class="token string">"UpperDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/613a73f697772accc7124826f2e8c5a9442067194dac6725b4041bf31426b528/diff"</span>,                <span class="token string">"WorkDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/613a73f697772accc7124826f2e8c5a9442067194dac6725b4041bf31426b528/work"</span>            <span class="token punctuation">}</span>,            <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"overlay2"</span>        <span class="token punctuation">}</span>,        <span class="token string">"Mounts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,        <span class="token string">"Config"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>            <span class="token string">"Hostname"</span><span class="token builtin class-name">:</span> <span class="token string">"c7e666c4f8f9"</span>,            <span class="token string">"Domainname"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"User"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"AttachStdin"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"AttachStdout"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"AttachStderr"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"Tty"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"OpenStdin"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"StdinOnce"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"Env"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Cmd"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token comment">#正在执行的脚本</span>                <span class="token string">"sh"</span>,                <span class="token string">"-c"</span>,                <span class="token string">"while true; do date; sleep 1; done"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Image"</span><span class="token builtin class-name">:</span> <span class="token string">"centos"</span>,            <span class="token string">"Volumes"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"WorkingDir"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"Entrypoint"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"OnBuild"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"Labels"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>                <span class="token string">"org.label-schema.build-date"</span><span class="token builtin class-name">:</span> <span class="token string">"20201204"</span>,                <span class="token string">"org.label-schema.license"</span><span class="token builtin class-name">:</span> <span class="token string">"GPLv2"</span>,                <span class="token string">"org.label-schema.name"</span><span class="token builtin class-name">:</span> <span class="token string">"CentOS Base Image"</span>,                <span class="token string">"org.label-schema.schema-version"</span><span class="token builtin class-name">:</span> <span class="token string">"1.0"</span>,                <span class="token string">"org.label-schema.vendor"</span><span class="token builtin class-name">:</span> <span class="token string">"CentOS"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token string">"NetworkSettings"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>            <span class="token string">"Bridge"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"SandboxID"</span><span class="token builtin class-name">:</span> <span class="token string">"fbc1e1df6875b6d6c74873448ec571df9b77d03eb82f83a03f8c2154e849d802"</span>,            <span class="token string">"HairpinMode"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"LinkLocalIPv6Address"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"LinkLocalIPv6PrefixLen"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"Ports"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,            <span class="token string">"SandboxKey"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/run/docker/netns/fbc1e1df6875"</span>,            <span class="token string">"SecondaryIPAddresses"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"SecondaryIPv6Addresses"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"EndpointID"</span><span class="token builtin class-name">:</span> <span class="token string">"4eb21a1962e4f9f7bc76a13c8abf5c766d79cc760c05b5de3d22dd8ed66eff2c"</span>,            <span class="token string">"Gateway"</span><span class="token builtin class-name">:</span> <span class="token string">"172.17.0.1"</span>,            <span class="token string">"GlobalIPv6Address"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"GlobalIPv6PrefixLen"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"IPAddress"</span><span class="token builtin class-name">:</span> <span class="token string">"172.17.0.2"</span>,            <span class="token string">"IPPrefixLen"</span><span class="token builtin class-name">:</span> <span class="token number">16</span>,            <span class="token string">"IPv6Gateway"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"MacAddress"</span><span class="token builtin class-name">:</span> <span class="token string">"02:42:ac:11:00:02"</span>,            <span class="token string">"Networks"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>                <span class="token string">"bridge"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>                    <span class="token string">"IPAMConfig"</span><span class="token builtin class-name">:</span> null,                    <span class="token string">"Links"</span><span class="token builtin class-name">:</span> null,                    <span class="token string">"Aliases"</span><span class="token builtin class-name">:</span> null,                    <span class="token string">"NetworkID"</span><span class="token builtin class-name">:</span> <span class="token string">"f159fca8bc27f5c77952b17f6a34544ff7b1ff4f1169c518ea666c9e4c4e8144"</span>,                    <span class="token string">"EndpointID"</span><span class="token builtin class-name">:</span> <span class="token string">"4eb21a1962e4f9f7bc76a13c8abf5c766d79cc760c05b5de3d22dd8ed66eff2c"</span>,                    <span class="token string">"Gateway"</span><span class="token builtin class-name">:</span> <span class="token string">"172.17.0.1"</span>,                    <span class="token string">"IPAddress"</span><span class="token builtin class-name">:</span> <span class="token string">"172.17.0.2"</span>,                    <span class="token string">"IPPrefixLen"</span><span class="token builtin class-name">:</span> <span class="token number">16</span>,                    <span class="token string">"IPv6Gateway"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,                    <span class="token string">"GlobalIPv6Address"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,                    <span class="token string">"GlobalIPv6PrefixLen"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,                    <span class="token string">"MacAddress"</span><span class="token builtin class-name">:</span> <span class="token string">"02:42:ac:11:00:02"</span>,                    <span class="token string">"DriverOpts"</span><span class="token builtin class-name">:</span> null                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="容器内文件拷贝到主机"><a href="#容器内文件拷贝到主机" class="headerlink" title="容器内文件拷贝到主机"></a>容器内文件拷贝到主机</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">cp</span> 容器id:文件全路径 主机路径<span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># docker run -it centos</span><span class="token punctuation">[</span>root@13a1337a31da /<span class="token punctuation">]</span><span class="token comment"># ls</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span class="token punctuation">[</span>root@13a1337a31da /<span class="token punctuation">]</span><span class="token comment"># cd home </span><span class="token punctuation">[</span>root@13a1337a31da home<span class="token punctuation">]</span><span class="token comment"># ls</span><span class="token punctuation">[</span>root@13a1337a31da home<span class="token punctuation">]</span><span class="token comment"># touch test.java</span><span class="token punctuation">[</span>root@13a1337a31da home<span class="token punctuation">]</span><span class="token comment"># exit</span><span class="token builtin class-name">exit</span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># docker cp 13a1337a31da:/home/test.java /home</span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># ls /home</span>day25_综合案例1.zip  softwares  test.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="命令汇总图"><a href="#命令汇总图" class="headerlink" title="命令汇总图"></a>命令汇总图</h4><p><img src="/assets/src=http___www.4e00.com_blog_img_linux_docker_docker-commands.png&amp;refer=http___www.4e00.jfif" alt="img"></p><h4 id="常用命令汇总表"><a href="#常用命令汇总表" class="headerlink" title="常用命令汇总表"></a>常用命令汇总表</h4><table><thead><tr><th>命令</th><th>参数/解释</th><th>示例</th></tr></thead><tbody><tr><td>attach</td><td>进入正运行的容器</td><td>docker attach 容器id</td></tr><tr><td>cp</td><td>从容器中拷贝文件到主机</td><td>docker cp 13a1337a31da:/home/test.java /home</td></tr><tr><td>exec</td><td>进入正在运行容器并开一个新的cmd终端</td><td>docker exec -it 容器ID /bin/bash</td></tr><tr><td>images</td><td>列出所有镜像</td><td>docker images</td></tr><tr><td>inspect</td><td>查看镜像元数据</td><td>docker inspect c7e666c4f8f9</td></tr><tr><td>run</td><td>启动容器</td><td>docker run -it centos /bin/bash</td></tr><tr><td>start</td><td></td><td>docker start 容器id</td></tr><tr><td>stop</td><td></td><td>docker stop 容器id</td></tr><tr><td>restart</td><td></td><td>docker restart 容器id</td></tr><tr><td>kill</td><td></td><td>docker kill 容器id</td></tr><tr><td>rmi</td><td>移除镜像</td><td></td></tr><tr><td>rm</td><td>移除容器</td><td></td></tr><tr><td>search</td><td>在docker-hub中搜索镜像</td><td></td></tr><tr><td>top</td><td>查看容器中运行的进程</td><td>docker top 容器</td></tr><tr><td>ps</td><td>列出正在运行容器</td><td>docker ps<br>docker ps -a   #列出所有容器包括已退出的</td></tr><tr><td>logs</td><td>日志</td><td></td></tr></tbody></table><h3 id="作业练习"><a href="#作业练习" class="headerlink" title="作业练习"></a>作业练习</h3><h4 id="部署nginx"><a href="#部署nginx" class="headerlink" title="部署nginx"></a>部署nginx</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1、搜索nginx镜像并下载</span><span class="token function">docker</span> search nginx<span class="token function">docker</span> pull nginx<span class="token comment">#2、进入nginx容器</span><span class="token function">docker</span> run -d --name nginx01 -p <span class="token number">8888</span>:80 nginx<span class="token comment">#3、服务器上测试</span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># curl localhost:8888</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Welcome to nginx<span class="token operator">!</span><span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span><span class="token comment">#4、访问阿里云外网ip:端口</span>http://47.115.182.137:8888/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考问题：每次改动nginx配置文件，都要进入容器内部 是不是很麻烦呢？</p><p>后面会讲到一种卷的技术 在容器外部提供一个映射路径 达到修改容器内文件的功能</p><h4 id="阿里云服务器端口控制"><a href="#阿里云服务器端口控制" class="headerlink" title="阿里云服务器端口控制"></a>阿里云服务器端口控制</h4><p>1、进入云服务器ECS</p><p><img src="/assets/1615646441942.png" alt="1615646441942"></p><p>2、安全组设置</p><p><img src="/assets/1615646475372.png" alt="1615646475372"></p><p>3、配置外网访问端口</p><p><img src="/assets/1615646514016.png" alt="1615646514016"></p><h4 id="部署tomcat"><a href="#部署tomcat" class="headerlink" title="部署tomcat"></a>部署tomcat</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull tomcat:9.0<span class="token function">docker</span> run -d -p <span class="token number">8080</span>:8080 --name tomcat01 tomcat<span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it tomcat01 /bin/bash<span class="token comment">#发现docker中下载的tomcat被阉割了，webapps目录中没有文件（阿里云镜像的原因 默认是最小镜像 所有不必要的都剔除掉了）</span>root@9e49ff27126b:/usr/local/tomcat<span class="token comment"># ls</span>BUILDING.txt     LICENSE  README.md      RUNNING.txt  conf  logs            temp     webapps.distCONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin          lib   native-jni-lib  webapps  workroot@9e49ff27126b:/usr/local/tomcat<span class="token comment"># ls webapps</span>root@9e49ff27126b:/usr/local/tomcat<span class="token comment"># ls webapps.dist/</span>ROOT  docs  examples  host-manager  manager<span class="token comment">#将webapps.dist中的文件拷贝到webapps中</span><span class="token function">cp</span> -r webapps.dist/* webappsroot@9e49ff27126b:/usr/local/tomcat<span class="token comment"># ls webapps</span>ROOT  docs  examples  host-manager  manager<span class="token comment">#服务器中访问</span><span class="token function">curl</span> localhost:8080<span class="token comment">#本地浏览器访问</span>http://47.115.182.137:8080/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载</span><span class="token function">docker</span> pull elasticsearch:7.11.1<span class="token comment">#运行</span><span class="token function">docker</span> run -d --name elasticsearch -p <span class="token number">9200</span>:9200 -p <span class="token number">9300</span>:9300 -e <span class="token string">"discovery.type=single-node"</span> elasticsearch:tag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>容器别名被占用怎么办？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">创建新的容器：<span class="token comment"># docker run --name tomcat8080 -d -p 8080:8080 tomcat</span>/usr/bin/docker-current: Error response from daemon: Conflict. The container name <span class="token string">"/tomcat8080"</span> is already <span class="token keyword">in</span> use by container e3274a72e8d62a0f3022d3201405ce586147b3031c1232452d001ee41fb9c938. You have to remove <span class="token punctuation">(</span>or <span class="token function">rename</span><span class="token punctuation">)</span> that container to be able to reuse that name<span class="token punctuation">..</span>See <span class="token string">'/usr/bin/docker-current run --help'</span><span class="token builtin class-name">.</span>//上面创建新容器出现了错误，提示：容器名被占用，须移除或重命名后才能使用这个容器名。【解决办法】<span class="token number">1</span>. 移除这个“tomcat8080”容器<span class="token comment"># docker rm e3274a72e8d6</span>e3274a72e8d6再看，容器已经移除：<span class="token comment"># docker ps -a</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span class="token number">2</span>. 然后再创建新容器<span class="token comment"># docker run --name tomcat8080 -d -p 8080:8080 tomcat</span>af52e9ac72c0393b5468cccf235ad70a7bf6a6b4ed30122b345b3758875d8911新容器创建成功，并且是运行状态：<span class="token comment"># docker ps -a</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMESaf52e9ac72c0        tomcat              <span class="token string">"catalina.sh run"</span>   <span class="token number">7</span> seconds ago       Up <span class="token number">5</span> seconds        <span class="token number">0.0</span>.0.0:8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp   tomcat8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker镜像理解"><a href="#Docker镜像理解" class="headerlink" title="Docker镜像理解"></a>Docker镜像理解</h2><p>镜像是什么？</p><blockquote><p>镜像是一种轻量级、可执行的独立软件保，用来打包软件运行环境和基于运行环境开发的软件，他包含运行某个软件所需的所有内容，包括<strong>代码、运行时库、环境变量和配置文件</strong>。<br>将所有的应用和环境，直接打包为docker镜像，就可以直接运行。</p></blockquote><h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><ul><li>UnionFs （联合文件系统）</li></ul><blockquote><p>我们下载的时候看到一层层的下载就是这个。<br>UnionFs（联合文件系统）：Union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，他支<br>持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（<br>unite several directories into a single virtual filesystem)。Union文件系统是<br>Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应<br>用镜像。<br><strong>特性</strong>：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系<br>统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p></blockquote><ul><li>Docker镜像加载原理</li></ul><blockquote><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。<br>boots(boot file system）主要包含 bootloader和 Kernel, bootloader主要是引导加 kernel,<br>Linux刚启动时会加bootfs文件系统，在 Docker镜像的最底层是 boots。这一层与我们典型的<br>Linux/Unix系统是一样的，包含boot加載器和内核。当boot加载完成之后整个内核就都在内存中了，此时<br>内存的使用权已由 bootfs转交给内核，此时系统也会卸载bootfs。<br>rootfs（root file system),在 bootfs之上。包含的就是典型 Linux系统中<br>的/dev,/proc,/bin,/etc等标准目录和文件。 rootfs就是各种不同的操作系统发行版，比如 Ubuntu,<br>Centos等等。</p></blockquote><img src="Docker入门篇/1616920181765.png" alt="1616920181765" style="zoom: 67%;"><ul><li>平时我们安装进虚拟机的CentOS都是好几个G，为什么Docker这里才200M？</li></ul><blockquote><p>对于个精简的OS,rootfs可以很小，只需要包合最基本的命令，工具和程序库就可以了，因为底层直接用<br>Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的Linux发行版， boots基本是一致<br>的， rootfs会有差別，因此不同的发行版可以公用bootfs.<br>虚拟机是分钟级别，容器是秒级！</p></blockquote><h3 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h3><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层层的在下载 。</p><img src="Docker入门篇/1616920360276.png" alt="1616920360276" style="zoom:80%;"><p>思考：为什么Docker镜像要采用这种分层的结构呢？</p><blockquote><p>最大的好处，我觉得莫过于资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机<br>只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器<br>服务了，而且镜像的每一层都可以被共享。<br>查看镜像分层的方式可以通过docker image inspect 命令</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># docker image inspect redis</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"Id"</span><span class="token builtin class-name">:</span> <span class="token string">"sha256:621ceef7494adfcbe0e523593639f6625795cc0dc91a750629367a8c7b3ccebb"</span>,        <span class="token string">"RepoTags"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>            <span class="token string">"redis:latest"</span>        <span class="token punctuation">]</span>,        <span class="token string">"RepoDigests"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>            <span class="token string">"redis@sha256:0f97c1c9daf5b69b93390ccbe8d3e2971617ec4801fd0882c72bf7cad3a13494"</span>        <span class="token punctuation">]</span>,        <span class="token string">"Parent"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,        <span class="token string">"Comment"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,        <span class="token string">"Created"</span><span class="token builtin class-name">:</span> <span class="token string">"2021-01-13T09:45:41.527587343Z"</span>,        <span class="token string">"Container"</span><span class="token builtin class-name">:</span> <span class="token string">"16535cfaf84a4049b6c02840219e8473787d5610e29409049df3a41bbf77a333"</span>,        <span class="token string">"ContainerConfig"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>            <span class="token string">"Hostname"</span><span class="token builtin class-name">:</span> <span class="token string">"16535cfaf84a"</span>,            <span class="token string">"Domainname"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"User"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"AttachStdin"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"AttachStdout"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"AttachStderr"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"ExposedPorts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>                <span class="token string">"6379/tcp"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>,            <span class="token string">"Tty"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"OpenStdin"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"StdinOnce"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"Env"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,                <span class="token string">"GOSU_VERSION=1.12"</span>,                <span class="token string">"REDIS_VERSION=6.0.10"</span>,                <span class="token string">"REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.10.tar.gz"</span>,                <span class="token string">"REDIS_DOWNLOAD_SHA=79bbb894f9dceb33ca699ee3ca4a4e1228be7fb5547aeb2f99d921e86c1285bd"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Cmd"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"/bin/sh"</span>,                <span class="token string">"-c"</span>,                <span class="token string">"#(nop) "</span>,                <span class="token string">"CMD [<span class="token entity" title="\&quot;">\"</span>redis-server<span class="token entity" title="\&quot;">\"</span>]"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Image"</span><span class="token builtin class-name">:</span> <span class="token string">"sha256:222c0cecc006d8c73a04a58b5fa15ebae171a6e82a8ee8650ae616f6f1798ef4"</span>,            <span class="token string">"Volumes"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>                <span class="token string">"/data"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>,            <span class="token string">"WorkingDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/data"</span>,            <span class="token string">"Entrypoint"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"docker-entrypoint.sh"</span>            <span class="token punctuation">]</span>,            <span class="token string">"OnBuild"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"Labels"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token string">"DockerVersion"</span><span class="token builtin class-name">:</span> <span class="token string">"19.03.12"</span>,        <span class="token string">"Author"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,        <span class="token string">"Config"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>            <span class="token string">"Hostname"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"Domainname"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"User"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"AttachStdin"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"AttachStdout"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"AttachStderr"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"ExposedPorts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>                <span class="token string">"6379/tcp"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>,            <span class="token string">"Tty"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"OpenStdin"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"StdinOnce"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"Env"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,                <span class="token string">"GOSU_VERSION=1.12"</span>,                <span class="token string">"REDIS_VERSION=6.0.10"</span>,                <span class="token string">"REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.10.tar.gz"</span>,                <span class="token string">"REDIS_DOWNLOAD_SHA=79bbb894f9dceb33ca699ee3ca4a4e1228be7fb5547aeb2f99d921e86c1285bd"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Cmd"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"redis-server"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Image"</span><span class="token builtin class-name">:</span> <span class="token string">"sha256:222c0cecc006d8c73a04a58b5fa15ebae171a6e82a8ee8650ae616f6f1798ef4"</span>,            <span class="token string">"Volumes"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>                <span class="token string">"/data"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>,            <span class="token string">"WorkingDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/data"</span>,            <span class="token string">"Entrypoint"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"docker-entrypoint.sh"</span>            <span class="token punctuation">]</span>,            <span class="token string">"OnBuild"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"Labels"</span><span class="token builtin class-name">:</span> null        <span class="token punctuation">}</span>,        <span class="token string">"Architecture"</span><span class="token builtin class-name">:</span> <span class="token string">"amd64"</span>,        <span class="token string">"Os"</span><span class="token builtin class-name">:</span> <span class="token string">"linux"</span>,        <span class="token string">"Size"</span><span class="token builtin class-name">:</span> <span class="token number">104285909</span>,        <span class="token string">"VirtualSize"</span><span class="token builtin class-name">:</span> <span class="token number">104285909</span>,        <span class="token string">"GraphDriver"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>            <span class="token string">"Data"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>                <span class="token string">"LowerDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/89ce7f8c7491981fd00b400d541c27855bbf188d1d4d6ac8878c64ec0a4049d0/diff:/var/lib/docker/overlay2/078a4ecd1b4a25f855a02233871ad8ef1aa661d6be7f7df0636cbf0420ffa32f/diff:/var/lib/docker/overlay2/c40ba32fd9474e7655086d5daba4c159474e63255ece62862a0a49e13ee732f5/diff:/var/lib/docker/overlay2/6e91f08996d4dcb36745e24486b71466395d31763d9ca1daab84002b6aa115af/diff:/var/lib/docker/overlay2/7250bfe2ea416494e38587c4790933f9944c899600f9b49ab0e6749a4e6157f7/diff"</span>,                <span class="token string">"MergedDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/66b59cc9e79f65953c2210f99d0e8a8ce6d03674a07d3da24576ea343d380a5e/merged"</span>,                <span class="token string">"UpperDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/66b59cc9e79f65953c2210f99d0e8a8ce6d03674a07d3da24576ea343d380a5e/diff"</span>,                <span class="token string">"WorkDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/66b59cc9e79f65953c2210f99d0e8a8ce6d03674a07d3da24576ea343d380a5e/work"</span>            <span class="token punctuation">}</span>,            <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"overlay2"</span>        <span class="token punctuation">}</span>,        <span class="token string">"RootFS"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>            <span class="token string">"Type"</span><span class="token builtin class-name">:</span> <span class="token string">"layers"</span>,            <span class="token string">"Layers"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token string">"sha256:cb42413394c4059335228c137fe884ff3ab8946a014014309676c25e3ac86864"</span>, <span class="token string">"sha256:8e14cb7841faede6e42ab797f915c329c22f3b39026f8338c4c75de26e5d4e82"</span>, <span class="token string">"sha256:1450b8f0019c829e638ab5c1f3c2674d117517669e41dd2d0409a668e0807e96"</span>, <span class="token string">"sha256:f927192cc30cb53065dc266f78ff12dc06651d6eb84088e82be2d98ac47d42a0"</span>, <span class="token string">"sha256:a24a292d018421783c491bc72f6601908cb844b17427bac92f0a22f5fd809665"</span>, <span class="token string">"sha256:3480f9cdd491225670e9899786128ffe47054b0a5d54c48f6b10623d2f340632"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>,        <span class="token string">"Metadata"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>            <span class="token string">"LastTagTime"</span><span class="token builtin class-name">:</span> <span class="token string">"0001-01-01T00:00:00Z"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的 Docker镜像都起始于一个基础镜像层，当进行修改或培加新的内容时，就会在当前镜像层之<br>上，创建新的镜像层。<br>举一个简单的例子，假如基于 Ubuntu Linux16.04创建一个新的镜像，这就是新镜像的第一层；如果在<br>该镜像中添加 Python包，<br>就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创健第三个镜像层该像当<br>前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。</p><img src="Docker入门篇/1616920507850.png" alt="1616920507850" style="zoom:67%;"><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了<br>一个简单的例子，每个镜像层包含3个文件，而镜像包含了来自两个镜像层的6个文件。</p><img src="Docker入门篇/1616920543074.png" alt="1616920543074" style="zoom:67%;"><p>上图中的镜像层跟之前图中的略有区別，主要目的是便于展示文件<br>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7<br>是文件5的一个更新版</p><img src="Docker入门篇/1616920570479.png" alt="1616920570479" style="zoom:67%;"><p>文种情況下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新<br>镜像层添加到镜像当中。<br>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统<br>一的文件系统。<br>Linux上可用的存储引撃有AUFS、 Overlay2、 Device Mapper、Btrfs以及ZFS。顾名思义，每种存储<br>引擎都基于 Linux中对应的。<br>件系统或者块设备技术，井且每种存储引擎都有其独有的性能特点。<br>Docker在 Windows上仅支持 windowsfilter 一种存储引擎，该引擎基于NTFS文件系统之上实现了分层<br>和CoW [1]。<br>下图展示了与系统显示相同的三层镜像。所有镜像层堆并合井，对外提供统一的视图。</p><img src="Docker入门篇/1616920595495.png" alt="1616920595495" style="zoom:67%;"><p>Docker 镜像都是只读的，当容器启动时，一个新的可写层加载到镜像的顶部！<br>这一层就是我们通常说的容器层，容器之下的都叫镜像层！</p><h3 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker commit 提交容器成为一个新的副本，命令和git原理类似</span><span class="token function">docker</span> commit -m<span class="token operator">=</span><span class="token string">"描述信息"</span> -a<span class="token operator">=</span><span class="token string">"作者"</span> 容器id 目标镜像名:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实战测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.运行tomcat </span><span class="token function">docker</span> run -d -p <span class="token number">8080</span>:8080 --name tomcat01 tomcat<span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it tomcat01 /bin/bash<span class="token comment">#2.进行自定义修改</span><span class="token function">cp</span> -r webapps.dist/* webapps<span class="token comment">#查看启动是否成功</span><span class="token function">curl</span> localhost:8080<span class="token comment">#3.提交自己的容器</span><span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># docker commit -m="add-webapp-index" -a="xiong" ad75bd202be5 my-tomcat:1.0</span>sha256:e22917a16fca6741200a1db97d15dbe0e263aa3899a7d912a383794aece13ad7<span class="token punctuation">[</span>root@iZwz9er8ll8isbzg8c3b5hZ ~<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY   TAG       IMAGE ID       CREATED         SIZEmy-tomcat    <span class="token number">1.0</span>       e22917a16fca   <span class="token number">7</span> seconds ago   654MBmysql        latest    c8562eaf9d81   <span class="token number">2</span> months ago    546MBredis        latest    621ceef7494a   <span class="token number">2</span> months ago    104MBtomcat       <span class="token number">9.0</span>       040bdb29ab37   <span class="token number">2</span> months ago    649MBtomcat       latest    040bdb29ab37   <span class="token number">2</span> months ago    649MBpython       <span class="token number">3.6</span>       6b0219e0ed75   <span class="token number">2</span> months ago    874MBnginx        latest    f6d0b4767a6c   <span class="token number">2</span> months ago    133MBcentos       latest    300e315adb2f   <span class="token number">3</span> months ago    209MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><h2 id="企业实战"><a href="#企业实战" class="headerlink" title="企业实战"></a>企业实战</h2><p>Docker Composer</p><p>Docker Swarm</p><p>CI/CD Jenkins流水线</p>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01java基础</title>
      <link href="/2022/05/08/01java-ji-chu/"/>
      <url>/2022/05/08/01java-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>自学Java如何从入门到精通<br><a href="https://www.zhihu.com/question/25255189?sort=created">https://www.zhihu.com/question/25255189?sort=created</a></p><h2 id="一、准备知识"><a href="#一、准备知识" class="headerlink" title="一、准备知识"></a>一、准备知识</h2><h3 id="Java语言发展"><a href="#Java语言发展" class="headerlink" title="Java语言发展"></a>Java语言发展</h3><p><strong>特点:</strong><br>简单: 针对C++简化了很多<br>跨平台:<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1559629/1595344554822-4533cb54-7565-4f9b-85dd-9031558789c5.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1559629/1595344554885-2c521785-70b5-476a-aaac-e649e2123495.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1559629/1595344554933-6cfb2bdf-1692-4ef5-bd24-6c117dce1834.png"><br><strong>Java平台体系:</strong></p><blockquote><p><strong>Java SE</strong><br>Java SE 以前称为 J2SE。它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为 Java Platform，Enterprise Edition（Java EE）提供基础。<br><strong>Java ME</strong><br>这个版本以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。<br>Java EE 是在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（service-oriented architecture，SOA）和 Web 2.0 应用程序。<br><strong>JavaEE</strong><br>Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。</p></blockquote><p><strong>几种名词的概念:</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1559629/1595344554980-c5de0c1a-f4d2-4897-a2e4-b32dbce04e90.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1559629/1595344555028-1cd48964-45c5-4d3c-b660-9da9357694c8.png"></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>单行注释</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 单行注释. 这一行内容会被jvm运行的时候过滤掉.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多行注释</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 多行注释 一次注释多行代码 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>文档注释</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">/**  * 文档注释  * 后期可以使用javadoc命令生成api文档  */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK安装和IDEA的安装"><a href="#JDK安装和IDEA的安装" class="headerlink" title="JDK安装和IDEA的安装"></a>JDK安装和IDEA的安装</h3><p><a href="https://book.apeland.cn/details/81/">https://book.apeland.cn/details/81/</a></p><h3 id="Java文件的编译和运行"><a href="#Java文件的编译和运行" class="headerlink" title="Java文件的编译和运行"></a>Java文件的编译和运行</h3><p><strong>在cmd命令行中运行：</strong></p><ul><li>首先进入文件所在目录</li><li>编译：<code>javac Hello.java</code>    默认cmd命令行使用的ANSI编码，中文会乱码报错<ul><li>生成一个<code>Hello.class</code> 文件</li></ul></li><li>运行：<code>java Hello</code><blockquote><p>我们使用编译器IEDA写的代码都是utf8编码的，直接使用<code>java Hello.java</code>编译会报“编码GBK的不可映射字符” 的错误，有两种解决办法<br>1）在notepad++中全选剪切代码，改变编码为ANSI，然后粘贴保存<br>2）<code>javac -encoding utf8 Hello.java</code>，指定编译.java文件的编码方法，但后面文件输出中有中文在cmd中显示还是会乱码，该方案适用于打印输入无中文的情况</p></blockquote></li></ul><p><strong>在IDEA中编译运行：</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1559629/1595344555102-0d84a3d2-7c38-40df-824f-7ef1f6ad1757.png#align=left&amp;display=inline&amp;height=450&amp;margin=%5Bobject%20Object%5D&amp;originHeight=688&amp;originWidth=784&amp;status=done&amp;style=none&amp;width=513"></p><blockquote><p>注意：<br>IDEA编写的代码第一行是包的依赖，如 package com.xjt.demo01;<br>如果使用命令行的方式运行会发现报错，找不到或无法加载主类<br>这时需要注释掉第一行</p></blockquote><h2 id="二、Java数据类型"><a href="#二、Java数据类型" class="headerlink" title="二、Java数据类型"></a>二、Java数据类型</h2><h3 id="1、基本数据类型"><a href="#1、基本数据类型" class="headerlink" title="1、基本数据类型"></a>1、基本数据类型</h3><ul><li><p><strong>整数</strong></p><ul><li>byte 字节. 1个字节, 范围: -128~127</li><li>short 短整数. 2个byte, 范围: -32768~32767</li><li>int 整数. 4个byte, 范围: -21亿~21亿-1</li><li>long 长整数. 8个byte</li></ul></li><li><p><strong>浮点数</strong></p><ul><li>float 单精度浮点数 精度低 </li><li>double 双精度浮点数 精度高</li></ul></li><li><p><strong>字符</strong></p><ul><li>char 字符类型 表示单个字符. 2个字节byte</li><li>必须使用单引号，字符串使用的是双引号</li><li>char类型可以存放数字，比如char c = 20037;  实际上是Unicode码中汉字 ‘久’</li></ul></li><li><p><strong>布尔</strong></p><ul><li>boolean 布尔类型 两个取值(true, false)，长度是8bit  1byte</li><li>Java中所有的数据类型的最小单元是 byte（1 byte==1B，1KB=1024B）<h4 id="1-1-数据类型转化"><a href="#1-1-数据类型转化" class="headerlink" title="1.1 数据类型转化"></a>1.1 数据类型转化</h4>首先, 这里的转化跟多的发生在数字身上，char和boolean一般不参与转化，谁也不会闲的把一个文字变成数字来干活。我们把数据类型进行排序, 按照能表示的数据量的范围进行排序.</li></ul></li><li><p><strong>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</strong></p></li></ul><p>为什么long排在float前面？因为整数是有数据量的范围的，而小数是没有的，很简单的例子, 0~1有多少个小数? 无数个.<br>从小数据类型向大数据类型转化是安全的 -&gt;直接转化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span class="token keyword">long</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到非常方便直接用就可以了,但是如果是大的数据类型向小数据类型转化的话,就需要强制类型转换(俗称强转).</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">short</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>强制类型转换的语法:<br>(转换之后的数据类型) 变量</p></blockquote><p>**小结: 小 -&gt; 大 : 自动转换 **<br><strong>大 -&gt; 小 : 强制类型转换</strong></p><h4 id="1-2-数据类型之间隐式转化"><a href="#1-2-数据类型之间隐式转化" class="headerlink" title="1.2 数据类型之间隐式转化"></a>1.2 数据类型之间隐式转化</h4><p>运算过程中，byte short char都会自动先转化为int</p><ol><li><p>相同数据类型之间<br>相同数据类型之间计算, 得到的一定是这个数据类型<br>int + int = int</p></li><li><p>不同数据类型之间<br>首先, 把小的数据类型自动转换成大的数据类型, 然后再进行计算, 得到的结果一定是大的数据类型.<br>int + long = long</p></li><li><p>特殊的byte, short, char<br>在计算的时候,首先会转化成int类型然后再进行计算，这样是安全的。<br>byte + byte = int<br>结果至少是int</p></li></ol><blockquote><p>结论:</p><ol><li>在执行算数运算的时候，byte, short 会自动的转化成int然后再进行计算。</li><li>如果不同数据类型之间进行计算，比如int+long. 此时, 程序会自动的把int转化成long，然后再进行计算. 所以结果一定是大的数据类型</li></ol></blockquote><p>恶心人的题:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">short</span> s2 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//s1 + 1 会先将s1转化为int，相加之后得到的是int 在赋值给short会报错</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>解析: 此时第2行代码一定会报错，因为s1是short类型，而short类型计算的时候会自动转换成int进行计算，并且，所有的数字默认都可以看做是int类型，默认的小数都可以看做是double类型，所以第二行计算的结果应该是int类型，把int类型的数据赋值给short类型的变量一定会报错的，此处必须要进行强制类型转换。<br>short s2 = (short) (s1 + 1);</p></blockquote><h3 id="2、引用数据类型"><a href="#2、引用数据类型" class="headerlink" title="2、引用数据类型"></a>2、引用数据类型</h3><p>引用数据类型非常多，大致包括：<br>类、 接口类型、 数组类型、 枚举类型、 注解类型、 字符串型<br>例如，String类型就是引用类型。<br><strong>简单来说，所有的非基本数据类型都是引用数据类型。</strong><br><strong>1.存储位置不同：</strong><br>基本变量类型：</p><ul><li>在方法中定义的非全局基本数据类型变量的具体内容是存储在栈中的</li></ul><p>引用变量类型：</p><ul><li>只要是引用数据类型变量，其具体内容都是存放在堆中的，而栈中存放的是其具体内容所在内存的地址<br><em>ps:通过变量地址可以找到变量的具体内容，就如同通过房间号可以找到房间</em></li></ul><p><strong>2.传递方式</strong><br>基本变量类型：</p><ul><li>在方法中定义的非全局基本数据类型变量，调用时按<strong>数值传递</strong></li></ul><p>引用变量类型：</p><ul><li><p>引用数据类型变量，调用时按<strong>引用传递</strong></p><h3 id="3、字符串"><a href="#3、字符串" class="headerlink" title="3、字符串"></a>3、字符串</h3><p>注意区别字符（单引号括起来的单个字符），被双引号引起来的内容都是字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"周杰伦"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//周杰伦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>字符串可以执行加法运算. 表示字符串拼接.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span><span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"赛利亚"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//你好赛利亚</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1你好</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当出现非字符串和字符串进行相加的时候. 首先把非字符串自动转化成字符串然后再执行拼接操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    # <span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>转义字符</strong>: 具有特定含义的字符串<br>\n  : 换行<br>\t   : 制表符<br>.   :   .<br>\’ : ‘<br>\”: “</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“你好啊<span class="token punctuation">,</span> 我叫\n周润发”<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//换行</span> 你好啊<span class="token punctuation">,</span> 我叫 周润发<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玛丽说: \"她喜欢你\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 玛丽说: "她喜欢你"</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello\t world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello    world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、数组"><a href="#4、数组" class="headerlink" title="4、数组"></a>4、数组</h3><p>数组: 具有相同数据类型的集合。int数组装一堆int，String数组装一堆String。<br>数组对数据类型是非常敏感的, 所以在声明数组的时候, 就需要给定数组的数据类型。<br>Java的数组有几个特点：</p></li><li><p>数组所有元素初始化为默认值，整型都是<code>0</code>，浮点型是<code>0.0</code>，布尔型是<code>false</code>；</p></li><li><p>数组一旦创建后，大小就不可改变。</p></li></ul><p>要访问数组中的某一个元素，需要使用索引。数组索引从<code>0</code>开始，例如，5个元素的数组，索引范围是<code>0</code>~`4<code>。 可以修改数组中的某一个元素，使用赋值语句，例如，</code>ns[1] = 79;<code>。 可以用</code>数组变量.length`获取数组长度</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li><p><strong>创建数组</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 创建一个10个格子的数组. 有10个位置装数据. 都是空的</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> games <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"LOL"</span><span class="token punctuation">,</span> <span class="token string">"DNF"</span><span class="token punctuation">,</span> <span class="token string">"绝地求生"</span><span class="token punctuation">,</span> <span class="token string">"男友4"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> smallGames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"CS"</span><span class="token punctuation">,</span> <span class="token string">"红色警戒"</span><span class="token punctuation">,</span> <span class="token string">"war3"</span><span class="token punctuation">,</span> <span class="token string">"扫雷"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//长度为5的整型数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//长度不定的整型数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一种, 只开辟内存空间，但不放入数据。<br>第二种和第三种, 开辟4个空间, 并放入数据</p></li><li><p><strong>数组的使用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"红色警戒"</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"war3"</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"CS"</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"英雄联盟"</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"男友5"</span><span class="token punctuation">;</span><span class="token comment">// arr[5] = "扫雷和埋雷";  // 报错. 数组下标越界 ArrayIndexOutOfBoundsException</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//红色警戒</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//war3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//CS</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//英雄联盟</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//男友5</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ArrayIndexOutOfBoundsException 要我说几遍. 没有第5个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><p>1.取索引的方式遍历数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"CS"</span><span class="token punctuation">,</span> <span class="token string">"红色警戒"</span><span class="token punctuation">,</span> <span class="token string">"war3"</span><span class="token punctuation">,</span> <span class="token string">"扫雷"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//数组.length就是数组的长度</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.<code>forEach</code>循环，直接迭代数组的每个元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> ns<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在<code>for (int n : ns)</code>循环中，变量<code>n</code>直接拿到<code>ns</code>数组的元素，而不是索引。<br>显然<code>for each</code>循环更加简洁。但是，<code>for each</code>循环无法拿到数组的索引，因此，到底用哪一种<code>for</code>循环，取决于我们的需要。</p></li><li><p><strong>打印数组内容</strong></p></li></ul><p>直接打印数组变量，得到的是数组在JVM中的引用地址：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类似 [I@7852e922</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这并没有什么意义，因为我们希望打印的数组的元素内容。因此，使用<code>for each</code>循环来打印它：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> ns<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>for each</code>循环打印也很麻烦。幸好Java标准库提供了<code>Arrays.toString()</code>，可以快速打印数组内容：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 1, 2, 3, 5, 8]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><p>较常见的多维数组就是二维数组，定义一个二维数组如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//[I@10f87f48</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr0 <span class="token operator">=</span> ns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//arr0和ns[0] 指向相同的内存区域</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr0<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//[I@10f87f48</span>ns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepToString</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[[1, 20, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[1, 20, 3, 4]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr0<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h4><p>Java程序的入口是<code>main</code>方法，而<code>main</code>方法可以接受一个命令行参数，它是一个<code>String[]</code>数组。这个命令行参数由JVM接收用户输入并传给<code>main</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以利用接收到的命令行参数，根据不同的参数执行不同的代码。例如，实现一个<code>-version</code>参数，打印程序版本号：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"-version"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"v 1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个程序必须在命令行执行，我们先编译它，会生成一个Main.class文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ javac Main.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，执行的时候，给它传递一个<code>-version</code>参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ java Main -version<span class="token function">v</span> <span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，程序就可以根据传入的命令行参数，作出不同的响应。<br><strong>小结:</strong><br>命令行参数类型是<code>String[]</code>数组，保存在args中，可以通过索引或遍历取值；<br>注意：package com.xjt.demo01;    IDEA编辑时第一行是引用的包名，如果使用命令行执行时需要注释掉，否则找不到该类。</p><ul><li><strong>练习：</strong></li></ul><p>1.倒序打印数组每个元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 倒序打印数组元素:</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>ns<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.数组冒泡排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">36</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ns<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>ns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>ns<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ns<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            ns<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//[8, 12, 18, 28, 36, 50, 65, 73, 89, 96]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.判断一个数是否是质数</p><blockquote><p>质数: 只能被1和自身整除的数</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">%</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num="</span><span class="token operator">+</span>num<span class="token operator">+</span><span class="token string">"，是质数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num="</span><span class="token operator">+</span>num<span class="token operator">+</span><span class="token string">"，不是质数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.数组中最大数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组arr中最大数为："</span><span class="token operator">+</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.计算数组平方和</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    sum<span class="token operator">+=</span>item<span class="token operator">*</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组arr各项的平方和="</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.鸡兔同笼问题：用户输入脚数目 判断鸡兔的所有可能情况</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入鸡兔脚数目："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> foots <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>foots<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//有i只鸡</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>foots<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸡有"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"只,兔子有"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>foots<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"只"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//请输入鸡兔脚数目：</span><span class="token comment">//10</span><span class="token comment">//鸡有1只,兔子有2只</span><span class="token comment">//鸡有3只,兔子有1只</span><span class="token comment">//鸡有5只,兔子有0只</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身（例如：1^3 + 5^3+ 3^3 = 153).</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个三位数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token operator">||</span> num <span class="token operator">&gt;</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该数不是水仙花数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> baiwei <span class="token operator">=</span> num<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> shiwei <span class="token operator">=</span> num<span class="token operator">%</span><span class="token number">100</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> gewei <span class="token operator">=</span> num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>baiwei<span class="token operator">*</span>baiwei<span class="token operator">*</span>baiwei<span class="token operator">+</span>shiwei<span class="token operator">*</span>shiwei<span class="token operator">*</span>shiwei<span class="token operator">+</span>gewei<span class="token operator">*</span>gewei<span class="token operator">*</span>gewei <span class="token operator">==</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该数是水仙花数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.命令行执行.java文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xjt<span class="token punctuation">.</span>demo01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-h"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-g"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"goodbey,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token operator">:</span>args                 <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>javac Demo01.java<br>java Demo01 -h xiong taop</p><h2 id="三、条件和循环控制语句"><a href="#三、条件和循环控制语句" class="headerlink" title="三、条件和循环控制语句"></a>三、条件和循环控制语句</h2><h3 id="1-if语句"><a href="#1-if语句" class="headerlink" title="1.if语句"></a>1.if语句</h3><blockquote><p>语法3(多分支语句):<br>if(条件1){<br>    语句块1<br>} else if (条件2){<br>    语句块2<br>} else if(条件3){<br>    语句块3<br>}…. else {<br>    else语句<br>}<br>执行流程:<br>判断条件1是否成立. 如果成立. 执行语句块1, 否则, 如果条件2成立, 执行语句2, 否则, 如果条件3成立, 执行语句3……如果所有条件都不成立. 执行else语句.</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 输入考试分数</span> <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"优秀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"良好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">70</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-while语句"><a href="#2-while语句" class="headerlink" title="2.while语句"></a>2.while语句</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还我钱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-switch语句"><a href="#3-switch语句" class="headerlink" title="3.switch语句"></a>3.switch语句</h3><p>示例:<br>输入月份, 进行判断. 如果是1,2,3月. 输出第一季度, 如果是4,5,6输出第二季度. 以此类推输出第三季度和第四季度</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> month <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>     <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>     <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一季度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>     <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>     <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二季度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>     <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>     <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三节度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>     <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>     <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第四季度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token keyword">default</span><span class="token operator">:</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您输入的月份有问题. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意: break表示跳出switch. 如果不写break则会发生case穿透现象<br>case穿透: 如果有一个case匹配成功, 则后面的case不会继续判断而是直接执行case中的语句</p></blockquote><h3 id="4-for语句"><a href="#4-for语句" class="headerlink" title="4.for语句"></a>4.for语句</h3><blockquote><p>语法:<br>for(语句1; 语句2; 语句3){<br>    循环体<br>}<br>解释:<br>语句1: 一般初始化我们的循环变量<br>语句2: 条件判断, 是否继续循环<br>语句3: 一般做循环变量的改变<br>执行流程: 首先执行语句1, 然后判断语句2是否成立，如果成立(true)执行循环体，如果不成立(false)，停止循环(for循环结束)，最后执行语句3，改变循环变量。然后继续判断语句2是否成立. 如果成立, 继续执行循环体 再执行语句3….以此类推，直到语句2为假循环跳出。</p></blockquote><p>案例: 从0数到9</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>特殊的for循环</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于i—的存在. i越来越小. i&lt;10恒成立. 所以次循环将会永远执行下去. 像这样的循环, 被称为死循环<br>另类的死循环</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"傻x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="for-each语法"><a href="#for-each语法" class="headerlink" title="for each语法"></a>for each语法</h4><p>这是for循环的增强语法，能直接取出数组/集合中的每一项，缺点是 不能获得下标</p><blockquote><p>for(类型 变量:可迭代对象){<br>    循环体<br>}</p></blockquote><p>示例：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1559629/1595344555167-144596e2-295c-4027-89db-8ef6ca83bb47.png#align=left&amp;display=inline&amp;height=178&amp;margin=%5Bobject%20Object%5D&amp;originHeight=178&amp;originWidth=454&amp;status=done&amp;style=none&amp;width=454"></p><h3 id="5-do-while语句"><a href="#5-do-while语句" class="headerlink" title="5.do-while语句"></a>5.do-while语句</h3><p>while循环是先判断条件，条件满足继续执行循环体，<br>do-while是先执行循环体，再判断条件是否满足，满足则进入下一次循环即执行循环体，判断条件。。。</p><blockquote><p>do {<br>// 循环体<br>} while (条件判断);</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-break和continue"><a href="#6-break和continue" class="headerlink" title="6.break和continue"></a>6.break和continue</h3><p>break：终止循环</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//0 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>continue：终止当前的循环，进入下一个循环</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 我不喜欢7</span>     <span class="token punctuation">}</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//0 1 2 3 4 5 6 8 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h2><p>函数也叫做方法</p><h3 id="1-定义方法"><a href="#1-定义方法" class="headerlink" title="1.定义方法"></a>1.定义方法</h3><p>语法：</p><blockquote><p>//static：普通的静态方法      void：该方法没有return返回值或返回值为空<br>public static void 方法名(){<br>    方法体<br>}<br>方法名() // 这里是调用方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">yue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1. 拿出手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2. 打开陌陌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3. 找一个美眉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4. 谈谈人生理想"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5. 约出来看个电影"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">count100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">yue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用上面定义好的方法</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爽啊...约完之后数100个数之后继续约"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">count100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">yue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用上面定义好的方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>带参数的方法定义：</strong></p><blockquote><p>public static void 方法名(参数){<br>    方法体<br>}<br>方法名(参数)</p></blockquote><p>参数两类:</p><ol><li>在方法声明的位置的括号里写的内容被称为形参. 形式上. 你在调用该方法的时候需要给一个数据. 那接收数据的话, 咱么说过, 变量是用来保存数据的. 所以, 所谓的形参, 实际上就是声明一个变量</li><li>在方法被调用的地方给方法传递的具体的信息, 这个叫实参.</li></ol><p>形参就是一个变量声明就可以了. 表示可以接受xxx类型的数据<br>实参必须是具体的数据, 可以是变量, 也可以直接是值.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Func_test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">yue</span><span class="token punctuation">(</span><span class="token class-name">String</span> tools<span class="token punctuation">,</span><span class="token class-name">String</span> doWhat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1. 拿出手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2. 打开"</span><span class="token operator">+</span>tools<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3. 找一个美眉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4. 谈谈人生理想"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5. 约出来"</span><span class="token operator">+</span>doWhat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">count100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">yue</span><span class="token punctuation">(</span><span class="token string">"陌陌"</span><span class="token punctuation">,</span><span class="token string">"看个电影"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用上面定义好的方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爽啊...约完之后数100个数之后继续约"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">count100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">yue</span><span class="token punctuation">(</span><span class="token string">"soul"</span><span class="token punctuation">,</span><span class="token string">"聚餐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用上面定义好的方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>接收不定参数：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接收不定参数的整数相加</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">addToSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item<span class="token operator">:</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token operator">+=</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//主函数中调用</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">addToSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//28</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法的返回值:</strong><br>带有返回值的方法:</p><blockquote><p>public static 返回值类型 方法(参数){<br>    方法体<br>    return xxx;<br>}</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">addTwoNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//主函数中调用</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">addTwoNum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:</p><ol><li>如果方法没有返回值, 那么在方法声明的地方必须要写void. 不可以空着.</li><li>如果方法有返回值. 那么在方法声明的地方必须写出方法的返回值类型.</li><li>如果方法有返回值. 在方法内部必须使用return语句来返回数据.</li><li>方法的返回值必须和返回值类型一致.</li><li>return语句执行之后, 方法就结束了. 后面不能执行任何代码.<h3 id="2-方法重载"><a href="#2-方法重载" class="headerlink" title="2.方法重载"></a>2.方法重载</h3>重载：方法的名字相同，参数的个数或者类型不同。调用方法时传入不同的参数/类型 就会调用不同的执行方法；<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMethod6</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">chi</span><span class="token punctuation">(</span><span class="token class-name">String</span> fan<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fan<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">chi</span><span class="token punctuation">(</span><span class="token class-name">String</span> fan<span class="token punctuation">,</span> <span class="token class-name">String</span> cai<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fan<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cai<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">chi</span><span class="token punctuation">(</span><span class="token class-name">String</span> fan<span class="token punctuation">,</span> <span class="token class-name">String</span> cai <span class="token punctuation">,</span> <span class="token class-name">String</span> tiandian<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fan<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cai<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tiandian<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">chi</span><span class="token punctuation">(</span><span class="token string">"大米饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">chi</span><span class="token punctuation">(</span><span class="token string">"大米饭"</span><span class="token punctuation">,</span> <span class="token string">"西红柿炒鸡蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">chi</span><span class="token punctuation">(</span><span class="token string">"大米饭"</span><span class="token punctuation">,</span> <span class="token string">"尖椒土豆丝"</span><span class="token punctuation">,</span> <span class="token string">"哈根达斯"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>我们发现, 在方法调用的时候. 程序会自动根据你给的参数类型和个数选择你要执行的方法.<br>再看一个<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMethod7</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两个int"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一个int, 一个long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一个int, 一个double"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、输入输出"><a href="#五、输入输出" class="headerlink" title="五、输入输出"></a>五、输入输出</h2><h3 id="读取输入"><a href="#读取输入" class="headerlink" title="读取输入"></a>读取输入</h3>前面已经看到，打印输出到’标准输出流’（即控制台窗口） 是一件非常容易的事情,只要<br>调用 System.out.println即可，然而读取”标准输人流” 就没有那么简单了,首先需要构建输入流Scanner in<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"please input your name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    name <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"please input your age:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> age <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"please input your score:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> score <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> avg <span class="token operator">=</span> score <span class="token operator">/</span> <span class="token number">3.0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"student:%s,age:%d,the score avg= %.2f"</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>avg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2020/png/1559629/1604281449721-facc6bf1-fa89-4cfb-bde6-83a55273d875.png#align=left&amp;display=inline&amp;height=330&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=330&amp;originWidth=349&amp;size=63600&amp;status=done&amp;style=none&amp;width=349" alt="image.png"></h3><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><a href="https://www.cnblogs.com/kunlbc/p/4518977.html">https://www.cnblogs.com/kunlbc/p/4518977.html</a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%,10.2f\r\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-,10.2f\r\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出</span><span class="token operator">-</span><span class="token number">3333.3333333333335</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">333.33</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">333.33</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2020/png/1559629/1604282346760-558a6430-4f44-47e3-acc5-ad5ec45d071f.png#align=left&amp;display=inline&amp;height=212&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=212&amp;originWidth=589&amp;size=67338&amp;status=done&amp;style=none&amp;width=589" alt="image.png"></h3><h4 id="格式化输出日期时间"><a href="#格式化输出日期时间" class="headerlink" title="格式化输出日期时间"></a>格式化输出日期时间</h4><img src="https://cdn.nlark.com/yuque/0/2020/png/1559629/1604282481044-78482ef5-2f1f-4e9f-9d05-d71bdaf0454e.png#align=left&amp;display=inline&amp;height=270&amp;margin=%5Bobject%20Object%5D&amp;originHeight=270&amp;originWidth=829&amp;size=0&amp;status=done&amp;style=none&amp;width=829"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1559629/1604282468694-4103efe6-46eb-4fcd-bb42-084b4966e61d.png#align=left&amp;display=inline&amp;height=640&amp;margin=%5Bobject%20Object%5D&amp;originHeight=640&amp;originWidth=832&amp;size=0&amp;status=done&amp;style=none&amp;width=832"><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3></li></ol><h3 id="文件输入与输出"><a href="#文件输入与输出" class="headerlink" title="文件输入与输出"></a>文件输入与输出</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/04/hello-world/"/>
      <url>/2022/05/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Python </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
